<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019.8.25-星期日</title>
      <link href="/posts/7d57c4fc/"/>
      <url>/posts/7d57c4fc/</url>
      
        <content type="html"><![CDATA[<p>linux下cat一个文件并重定向到此文件为什么会为空</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不管是外连接还是内链接，先连接然后再加条件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.ip,<span class="keyword">count</span>(a.domain),host_domain <span class="keyword">from</span> <span class="keyword">domain</span> <span class="keyword">as</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">select</span> * <span class="keyword">from</span> ips) <span class="keyword">as</span> b <span class="keyword">on</span> a.ip=b.ip <span class="keyword">where</span> a.host_domain=<span class="string">'ybm100.com'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.ip</span><br></pre></td></tr></table></figure><p>shell中可能经常能看到：&gt;/dev/null 2&gt;&amp;1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/dev/null 代表空设备文件 </span><br><span class="line">&gt; 代表重定向到哪里，例如：<span class="built_in">echo</span> <span class="string">"123"</span> &gt; /home/123.txt </span><br><span class="line">1 表示stdout标准输出，系统默认值是1，所以<span class="string">"&gt;/dev/null"</span>等同于<span class="string">"1&gt;/dev/null"</span> </span><br><span class="line">2 表示stderr标准错误 </span><br><span class="line">&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.8.24-星期六</title>
      <link href="/posts/c8b05d84/"/>
      <url>/posts/c8b05d84/</url>
      
        <content type="html"><![CDATA[<p>awk正则匹配需要在两边加双斜杠</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk -F&apos;.&apos; &apos;/zzzz/&#123;print $1&#125;&apos;</span><br></pre></td></tr></table></figure><p>question:</p><ol><li>前面的管道内的内容进入不了awk</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">massdns -r /root/tools/massdns/resover.txt -s 100 -w /tmp/massdns_burp_results.txt -o Sn /tmp/massdns_burp_tmp.txt 2&gt;&amp;1  | grep <span class="string">'Processed'</span> |  awk <span class="string">'/Processed/&#123;print $3&#125;'</span></span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://stackoverflow.com/questions/2342826/how-to-pipe-stderr-and-not-stdout" target="_blank" rel="noopener">https://stackoverflow.com/questions/2342826/how-to-pipe-stderr-and-not-stdout</a></p><p>snippets:<br>从已经弄好的域名中获取信息 并打印进度</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">massdns -r /root/tools/massdns/resover.txt -s 100 -w /tmp/massdns_burp_results.txt -o Sn /tmp/massdns_burp_tmp.txt 2&gt;&amp;1  |  awk &apos;/Progress/&#123;print $2&#125;&apos;</span><br></pre></td></tr></table></figure><p>当awk中的pattern有变量的时候<br>awk -v pat=&quot;$pattern&quot; -F&quot;:&quot; ‘$0 ~ pat { print $1, $2, $3, $4 }’ sample_profile.txt<br>不能用双斜杠</p><p>mysql docker 无法远程访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.在虚拟机的centos 中安装 docker 的mysql 镜像。</span><br><span class="line"></span><br><span class="line">docker run --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:latest</span><br><span class="line">2 .在虚拟机外面通过客户端访问docker安装的mysql ，连接失败</span><br><span class="line"></span><br><span class="line">（1）进入镜像中的mysql（ti 后面的字符串是mysql镜像ID）</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -ti 2cbb0f246353 /bin/bash</span><br><span class="line">（2）登录mysql</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line">（3）修改root 可以通过任何客户端连接</span><br><span class="line"></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><p>mysql</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -uroot -p123 --default-character-set=utf8 -e &apos;insert into `anquan-recon`.domain(domain,host_domain,record_type,cname_domain,ip,create_at) values(&quot;aa.zuanlikeji.com&quot;,&quot;zuanlikeji.com&quot;,&quot;A&quot;,&quot;cbb.zuanlikeji.com&quot;,null,&quot;aaaa&quot;) on DUPLICATE KEY UPDATE record_type=values(record_type),ip=values(ip),create_at=values(create_at),cname_domain=values(cname_domain);&apos;</span><br></pre></td></tr></table></figure><p>修改时区：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><p>shell 格式化输出日期</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br></pre></td></tr></table></figure><p>shell执行sql时候获取返回影响的行数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">添加下面sql到末尾</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROW_COUNT</span>();</span><br></pre></td></tr></table></figure><p><a href="http://ip-api.com/" target="_blank" rel="noopener">http://ip-api.com/</a></p><p><a href="http://ip.taobao.com/service/getIpInfo.php?ip=121.29.54.195" target="_blank" rel="noopener">http://ip.taobao.com/service/getIpInfo.php?ip=121.29.54.195</a></p><p><a href="http://whois.pconline.com.cn/ip.jsp?ip=" target="_blank" rel="noopener">http://whois.pconline.com.cn/ip.jsp?ip=</a></p><p>jq 将多个属性 同一行输出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jq -n -r <span class="string">'[1,2,3] | @csv'</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">myprocess | jq -r <span class="string">'.id, .crn, .date'</span> | (</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">read</span> id; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> crn</span><br><span class="line">        <span class="built_in">read</span> date</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$id</span> <span class="variable">$crn</span> <span class="variable">$date</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>什么是ASN？</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">每家ISP都应该有自己的ASN,用通俗的语言来形容，就是一个互联网的独立王国，这一个个独立王国互联起来，就组成了互联网（Internet）。</span><br><span class="line">世界上网络是连起来的。每个asn 域都有自己的范围和策略就像每个国家一样 ，每个国家有自己的的领土范围，而且有自己的法律定义。每个asn域内部发生网络变化不会影响到别的as. 各个asn 连接起来就是现在的互联网世界。</span><br><span class="line">只有在需要配置与 ISP 不同的路由策略时才需要使用自己的 ASN</span><br></pre></td></tr></table></figure><p>awk 按file1中的序列过滤file2的值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk <span class="string">'FNR==NR &#123; a[$NF]; next &#125; &#123; print &gt; ($NF in a ? "deleted" : "present") &#125;'</span> other main</span><br><span class="line"></span><br><span class="line"><span class="comment"># FNR==NR  在第一个文件中这个值会相等成立，但第二个文件中就不行了</span></span><br><span class="line"><span class="comment"># $NF 代表最后一个字段</span></span><br><span class="line"></span><br><span class="line">这里的去引号，是个坑，可能会导致判断失败</span><br><span class="line">awk -F, <span class="string">'NR==FNR&#123;a[$1]=1;next&#125;; !(a[substr($NF,2,length($NF)-2)]&gt;0)&#123;print a[substr($NF,2,length($NF)-2)];print substr($NF,2,length($NF)-2)&#125;'</span> /tmp/ybm100.com_fanjiexi.txt /root/data/ybm100.com/info/domains.txt </span><br><span class="line"></span><br><span class="line">当第一个文件为空的时候，NR和FNR永远相等</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>安全学习资源</title>
      <link href="/posts/4b2524a1/"/>
      <url>/posts/4b2524a1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://yangyangwithgnu.github.io/" target="_blank" rel="noopener">yangyangwithgnu</a> - 文章思路很清晰</p><p><a href="https://www.leavesongs.com/" target="_blank" rel="noopener">离别歌</a> - p神博客，代码审计大神</p><p><a href="https://www.sec-wiki.com/" target="_blank" rel="noopener">sec-wiki</a> - 安全综合网站</p>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.8.23-星期五</title>
      <link href="/posts/e7928004/"/>
      <url>/posts/e7928004/</url>
      
        <content type="html"><![CDATA[<p>shell上获取最后一个参数的快捷键<br>esc+. 或者 !$</p><p>Error compiling - “-fstack-protector-strong”<br>gcc -v 显示是4.8</p><p>4.9才能用这个参数<br>把Makefile中的这个参数改成-fstack-protector-all即可</p><p>massdns Sn 的结果整理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat guazi_result.txt | awk  <span class="string">'BEGIN&#123;domain=""&#125;&#123;if($2=="CNAME" &amp;&amp; domain=="")&#123;domain=$1&#125;else if($2=="A" &amp;&amp; domain!="")&#123;printf "%s CNAME %s %s\n",domain,$1,$3;domain=""&#125; else if(domain=="" &amp;&amp; $2=="A")&#123;printf "%s null A %s\n",$1,$3&#125;&#125;'</span> | grep guazi.com</span><br></pre></td></tr></table></figure><p>去除最后一个字符</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat guazi_result_handled.txt | awk <span class="string">'&#123;print substr($1,0,length($1))&#125;'</span></span><br></pre></td></tr></table></figure><p>docker run imagename   #参数必须带imagename前面</p><p>当awk中的pattern有变量的时候<br>awk -v pat=&quot;$pattern&quot; -F&quot;:&quot; ‘$0 ~ pat { print $1, $2, $3, $4 }’ sample_profile.txt<br>不能用双斜杠</p><p>mysql docker 无法远程访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先要保证本机能访问虚拟机的网络</span><br><span class="line">并且虚拟机开通了mysql的访问端口</span><br><span class="line"></span><br><span class="line">进入容器</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id /bin/bash</span><br><span class="line"></span><br><span class="line">进入mysql数据库开启远程访问权限</span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment">#use mysql</span></span><br><span class="line"><span class="comment">#update user set password_expired = "Y"where user="root";</span></span><br><span class="line">ALTER USER<span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123456'</span>;</span><br><span class="line">cmd 远程连接 mysql -h 192.168.218.129 -uroot -p -P 3306</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.8.22-星期四</title>
      <link href="/posts/12787834/"/>
      <url>/posts/12787834/</url>
      
        <content type="html"><![CDATA[<p>vscode 远程当出现无法没有权限写CONFIG的时候</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">就在环境变量中，把openSSH的环境变量去掉，把git ssh的环境变量加上去</span><br></pre></td></tr></table></figure><p>vscode 远程写shell出现:$’\r’: command not found</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改vscode右下角的LF为CRLF</span><br></pre></td></tr></table></figure><p>shell 函数中获取当前函数名<br>$FUNCNAME</p><p>域名的正则表达式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/^(?=^.&#123;3,255&#125;$)[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+$/</span><br></pre></td></tr></table></figure><p>命令替换<code>...</code>, $(…)是运行在子shell里命令的输出</p><p>shell 获取参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> f:e:p:  option</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">"<span class="variable">$&#123;option&#125;</span>"</span> <span class="keyword">in</span></span><br><span class="line">        f)</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$&#123;OPTARG&#125;</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$&#123;OPTARG&#125;</span></span><br><span class="line">            ;;</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">shift</span> $((OPTIND - 1))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>获取shell最后一个参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> last; <span class="keyword">do</span> <span class="literal">true</span>; <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$last</span></span><br></pre></td></tr></table></figure><p>借用全局变量的办法不通过子shell调用获取返回值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">myfunc</span></span>() &#123; <span class="built_in">declare</span> -g <span class="variable">$1</span>=<span class="string">"hello"</span>; &#125;</span><br></pre></td></tr></table></figure><p>Then call it as:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myfunc mystring</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$mystring</span> world"</span> <span class="comment"># gives "hello world"</span></span><br></pre></td></tr></table></figure><p>获取倒数第二个参数<br>second_to_last=&quot;${@😦-2):1}&quot;</p><p>变量名中的变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#赋值</span></span><br><span class="line">v=<span class="string">'2014'</span></span><br><span class="line"><span class="built_in">declare</span>  a_<span class="variable">$&#123;v&#125;</span>=<span class="string">'hello 2014'</span>    <span class="comment">#如果加-g 则是声明全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line">year=2014</span><br><span class="line">varname=a_<span class="variable">$&#123;year&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!varname&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.8.21-星期三</title>
      <link href="/posts/eece379e/"/>
      <url>/posts/eece379e/</url>
      
        <content type="html"><![CDATA[<p>vim快捷键</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">复制光标所在行 yy</span><br><span class="line">复制光标所在行到系统的剪贴板 <span class="string">"+yy</span></span><br><span class="line"><span class="string">粘贴系统剪贴板的内容  "</span>+p</span><br><span class="line">全部复制：按esc后，按键ggyG</span><br><span class="line">粘贴 p</span><br><span class="line">删除/剪切  dd</span><br><span class="line">删除当前行到文件结尾的内容 dG</span><br><span class="line">/apache  在文档中查找apache 按n跳到下一个，<span class="built_in">shift</span>+n上一个</span><br><span class="line"></span><br><span class="line">光标移动到文件的第一行  gg</span><br><span class="line">光标移动到文件的最后一行  G</span><br><span class="line">光标移动到这一行的行首  0（数字0）</span><br><span class="line">把光标移动大这一行的结尾 $</span><br><span class="line"></span><br><span class="line">在命令行模式下输入 u 可以撤销上一次的操作</span><br><span class="line">r   与u相反，表示重做前一步操作</span><br><span class="line">.   点，表示重复前一个操作，例：想多次复制，一直按这个点就行了</span><br></pre></td></tr></table></figure><p>vim 是否支持系统剪贴板</p><p>用vim 打开一个文件，然后执行命令：reg 查看是否有 + 或者 × 号  或者执行：version 命令 查看是否有+clipboard<br>1.如果存在：则可以使用 “+y 将vim 里面的内容复制到系统剪贴板或者 +p 将系统剪贴板里面的内容复制到vim 里面<br>2.如果不存在：则需要安装vim-gnome， 然后就可以用以上命令粘贴复制</p><p>ps: 也可以在 /etc/vim/.vimrc 里面设置 clipboard=unnamedplus 这样就可以直接使用 y p命令直接粘贴复制了</p><h4 id="shell学习"><a class="markdownIt-Anchor" href="#shell学习"></a> shell学习</h4><p>shell中的变量默认是当作字符串类型<br>data+&quot;%F&quot;    # 2019-8-21<br>命令替换<br>aa=``<br>aa=$()<br>执行命令的结果,赋值给变量</p><p>read -n 2 -p “describe” ip   #读入一个变量，有提示，长度为2<br>read ip1 ip2 ip3<br>1.1.1.1 2.2.2.2 3.3.3.3<br>默认按空格拆分成三个变量</p><p>#!/usr/bin/bash</p><p>变量引用中的问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name=liuyuxiao</span><br><span class="line"><span class="string">"<span class="variable">$name</span> is good"</span>   <span class="comment">#liuyuxiao i good</span></span><br><span class="line"><span class="string">'$name is good'</span>   <span class="comment">#$name is good</span></span><br></pre></td></tr></table></figure><p>单引号不会解析变量</p><p>当遇见感叹号 双引号会有问题<br>“name is good !”<br>“name is good”’!’</p><p>运算<br>方法一：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expr expr 1 + 2</span><br><span class="line">expr <span class="variable">$num1</span> + <span class="variable">$num2</span> + - \* / %</span><br><span class="line">这里的*要转义</span><br><span class="line">要</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(()) <span class="built_in">echo</span> $((<span class="variable">$num1</span>+<span class="variable">$num2</span>)) + - * / %</span><br><span class="line"><span class="built_in">echo</span> $((num1+num2))</span><br><span class="line"><span class="built_in">echo</span> $((5-3*2))</span><br><span class="line"><span class="built_in">echo</span> $(((5-3)*2))</span><br><span class="line"><span class="built_in">echo</span> $((2**3))</span><br><span class="line">sum=$((1+2));</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$sum</span></span><br></pre></td></tr></table></figure><p>方法三：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$[] <span class="built_in">echo</span> $[5+2] + - * / %</span><br><span class="line"><span class="built_in">echo</span> $[5**2]</span><br><span class="line">``` </span><br><span class="line">方法四：</span><br><span class="line">```bash</span><br><span class="line"><span class="built_in">let</span> sum=2+3;<span class="built_in">echo</span> <span class="variable">$sum</span> </span><br><span class="line"><span class="built_in">let</span> i++;<span class="built_in">echo</span> <span class="variable">$i</span></span><br></pre></td></tr></table></figure><p><code>bash -vx *.sh</code>  以调试的方式执行<br><code>sh -vx 02.sh</code> 以调试的方式执行，查询整个执行过程</p><p>小数运算</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"2*4"</span> |bc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"2^4"</span> |bc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"scale=2;6/4"</span> |bc</span><br><span class="line">awk <span class="string">'BEGIN&#123;print 1/2&#125;'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"print 5.0/2"</span> |python</span><br></pre></td></tr></table></figure><p>变量的删除和替换</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#url&#125;</span> 获取变量值的长度</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url#*.&#125;</span> 从前往后，最短匹配  这里的.就是.,删除到第一个点</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url##*.&#125;</span> 从前往后，最长匹配 贪婪匹配，删除到最后一个点</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%.*&#125;</span> 从后往前删，删除到第一个点，最短匹配</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url%%.*&#125;</span> 从后往前删，删除到最后一个点最长匹配 贪婪匹配</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:0:5&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url:5&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url/n/N&#125;</span>  替换其中的第一个n为N</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;url//n/N&#125;</span> 贪婪匹配，替换所有的n为N</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var1-aaaaa&#125;</span> 给变量设置默认值，如果var1不存在，则这个表达式的值为aaaaa，空值不会被替代</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var1:-aaaaa&#125;</span> 与上面的区别是，如果是空值也会被替代</span><br></pre></td></tr></table></figure><p>预定义变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$0</span> 脚本名 </span><br><span class="line">$* 所有的参数 </span><br><span class="line"><span class="variable">$@</span> 所有的参数 </span><br><span class="line"><span class="variable">$#</span> 参数的个数 </span><br><span class="line">$$ 当前进程的 PID  </span><br><span class="line">$! 上一个后台进程的 PID </span><br><span class="line">$? 上一个命令的返回值 0 表示成功   </span><br><span class="line">``` </span><br><span class="line">\$*和\<span class="variable">$@</span>的区别 </span><br><span class="line">``` </span><br><span class="line">可以看到不加引号时,二者都是返回传入的参数, 但加了引号后,此时 $*把参数作为一个字符串整体(单字符串)返回, <span class="variable">$@</span>把每个参数作为一个字符串返回 </span><br><span class="line">```  </span><br><span class="line">[[~=]] 按正则方式匹配  </span><br><span class="line"><span class="comment">#### 条件测试 </span></span><br><span class="line">```bash </span><br><span class="line"><span class="built_in">test</span> -d /path      是否是一个目录 <span class="built_in">test</span>     </span><br><span class="line">        -a     &amp;&amp;     </span><br><span class="line">        -o     ||     </span><br><span class="line">        -n     字符串长度不为0     </span><br><span class="line">        -z     字符串长度为0     </span><br><span class="line">        str = str2     </span><br><span class="line">        str != str2 </span><br><span class="line">        ! <span class="built_in">test</span> -d /path    取反 [ -d /path ]      [是命令  ]是[命令的参数 </span><br><span class="line">``` </span><br><span class="line">文件测试</span><br></pre></td></tr></table></figure><p>见周二笔记</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数值比较 </span><br><span class="line">``` bash</span><br><span class="line">[ 1 -gt 10 ] 大于</span><br><span class="line">[ 1 -lt 10 ] 小于</span><br><span class="line">[ 1 -eq 10 ] 等于</span><br><span class="line">[ 1 -ne 10 ] 不等于</span><br><span class="line">[ 1 -ge 10 ] 大于等于</span><br><span class="line">[ 1 -le 10 ] 小于等于  </span><br><span class="line">``` </span><br><span class="line">字符串比较         </span><br><span class="line">特殊符号 </span><br><span class="line">``` bash</span><br><span class="line">() 子 shell 中执行  </span><br><span class="line">(()) 数值比较，运算 C 语言  </span><br><span class="line">$() 命令替换  </span><br><span class="line">$(()) 整数运算 </span><br><span class="line">&#123;&#125;  </span><br><span class="line">$&#123;&#125;  </span><br><span class="line">[] 条件测试  </span><br><span class="line">[[]] 条件测试，支持正则 =~  </span><br><span class="line">$[] 整数运算  </span><br><span class="line">```   </span><br><span class="line">`grep &apos;cat $1&apos; *`  </span><br><span class="line"></span><br><span class="line">从当前所有文件中查找内容包含cat $1的脚本  读取文件对每一行进行处理 </span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">for ip in `cat $1` </span><br><span class="line">do </span><br><span class="line">done </span><br><span class="line">``` </span><br><span class="line">超过90发邮件 </span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">if [ $disk_use -ge 90];then</span><br><span class="line">    echo &quot;`aasdasdasd`&quot; | mail -s &quot;disk war&quot; $mail_user </span><br><span class="line">```  </span><br><span class="line">``` bash</span><br><span class="line">[ 1 -lt 2 -a 5 -gt 10 ];echo $? 1 </span><br><span class="line">[ 1 -lt 2 -o 5 -gt 10 ];echo $? 0  </span><br><span class="line">[[ 1 -lt 2 &amp;&amp; 5 -gt 10 ]];echo $?  1 </span><br><span class="line">[[ 1 -lt 2 || 5 -gt 10 ]];echo $?    </span><br><span class="line">使用正则 </span><br><span class="line"> [[ &quot;$num20&quot; =~ ^[0-9]+$ ]];echo $?  </span><br><span class="line">判断是否是数字 </span><br><span class="line">[[ ! &quot;$num&quot; =~ ^[0-9]+$ ]] </span><br><span class="line">``` </span><br><span class="line">#### 流程控制 </span><br><span class="line">单分支结构 </span><br><span class="line">``` bash</span><br><span class="line">if 条件测试  </span><br><span class="line">    then 命令序列  </span><br><span class="line">fi  </span><br><span class="line">``` </span><br><span class="line">双分支结构 </span><br><span class="line">``` bash</span><br><span class="line">if 条件测试  </span><br><span class="line">    then 命令序列  </span><br><span class="line">    else 命令序列  </span><br><span class="line">fi  </span><br><span class="line">``` </span><br><span class="line">多分支结构  </span><br><span class="line">``` bash</span><br><span class="line">if 条件测试 1  </span><br><span class="line">    then 命令序列    </span><br><span class="line">    [elif 条件测试 2  </span><br><span class="line">    then 命令序列    </span><br><span class="line">    elif 条件测试 3   </span><br><span class="line">    then 命令序列] </span><br><span class="line">    ...    </span><br><span class="line">    else 命令序列 </span><br><span class="line">fi  </span><br><span class="line">```   </span><br><span class="line">#### case的用法 </span><br><span class="line">``` bash</span><br><span class="line">case $name in  </span><br><span class="line">1)     命令序列     </span><br><span class="line">        ;; </span><br><span class="line">2)     命令序列     </span><br><span class="line">        ;; </span><br><span class="line">*)     无匹配命令序列 </span><br><span class="line">esac </span><br><span class="line">``` </span><br><span class="line">通过cat来实现多行输出 </span><br><span class="line">```bash</span><br><span class="line">cat&lt;&lt;-EOF </span><br><span class="line">    +-------------------+</span><br><span class="line">    |                   | </span><br><span class="line">    |                   | </span><br><span class="line">    +-------------------+ </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="ifs"><a class="markdownIt-Anchor" href="#ifs"></a> IFS</h4><p>IFS 是一种 set 变量，当 shell 处理&quot;命令替换&quot;和&quot;参数替换&quot;时，shell 根据 IFS 的值，默认是 space, tab, newline 来拆解读入的变量，然后对特殊字符进行处理，最后重新组合赋值给该变量。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line">OLD_IFS=<span class="variable">$IFS</span> <span class="comment">#保存原始值 </span></span><br><span class="line">IFS=<span class="string">""</span>   <span class="comment">#改变IFS的值  IFS=$'\n' 使用换行作为分隔符 ... ...</span></span><br><span class="line">IFS=<span class="variable">$OLD_IFS</span> <span class="comment">#还原IFS的原始值 </span></span><br><span class="line">``` </span><br><span class="line"><span class="comment">#### 循环 </span></span><br><span class="line">ping -W 超时时间  <span class="keyword">for</span>循环 </span><br><span class="line">``` bash</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;;<span class="keyword">do</span>   <span class="comment">#`seq 2 254` </span></span><br><span class="line">    ping xxx </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> a b c d;<span class="keyword">do</span>     </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$alpha</span> </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line">list=<span class="string">"a b c d"</span> </span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> <span class="variable">$list</span>;<span class="keyword">do</span>     </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$alpha</span> </span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line">list=<span class="string">"a b c d"</span> </span><br><span class="line"><span class="keyword">for</span> alpha <span class="keyword">in</span> <span class="string">"<span class="variable">$list</span>"</span>;<span class="keyword">do</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$list</span> </span><br><span class="line"><span class="keyword">done</span> 这时输出就只有一行a b c d。 </span><br><span class="line">``` </span><br><span class="line">可以把循环体用&#123;&#125;括起来，然后加&amp;放到后台执行 </span><br><span class="line">``` bash</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;;<span class="keyword">do</span>   <span class="comment">#`seq 2 254`    </span></span><br><span class="line">&#123;         </span><br><span class="line">    ping xxx     </span><br><span class="line">&#125;&amp; </span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line">``` </span><br><span class="line">加依赖 </span><br><span class="line">``` bash</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;;<span class="keyword">do</span>   <span class="comment">#`seq 2 254`     </span></span><br><span class="line">&#123;         </span><br><span class="line">    ping xxx     </span><br><span class="line">&#125;&amp; </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span> <span class="comment">#等待所有的后台进程结束 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"finish"</span> </span><br><span class="line">```  </span><br><span class="line">任何脚本前面可以加一个time来统计执行时间 </span><br><span class="line">`time ./ping101.sh`  </span><br><span class="line">whie循环 通过重定向读文件 </span><br><span class="line">``` bash</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> user <span class="keyword">do</span>   </span><br><span class="line">    useradd <span class="variable">$user</span> </span><br><span class="line"><span class="keyword">done</span> &lt; user.txt </span><br><span class="line">```  </span><br><span class="line"><span class="keyword">while</span> 会读空行，<span class="keyword">for</span>不会读空行  </span><br><span class="line">until循环 </span><br><span class="line">``` bash</span><br><span class="line">until <span class="built_in">command</span>;<span class="keyword">do</span> </span><br><span class="line">commnds <span class="keyword">done</span> </span><br><span class="line">和<span class="keyword">while</span>一样，唯一不同的是如果<span class="built_in">command</span>返回0，则不执行，否则就执行 </span><br><span class="line">```  </span><br><span class="line">文件句柄 </span><br><span class="line">``` bash</span><br><span class="line">touch /file1</span><br><span class="line"><span class="built_in">exec</span> 6&lt;&gt; /file1 //打开文件             打开文件句柄</span><br><span class="line">ll /proc/2$/fd                         列出打开的文件句柄</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"tianyun"</span> &gt; /proc/2$/fd/6        通过句柄写入文件 </span><br><span class="line"><span class="built_in">exec</span> 6&lt;&amp;-                            释放文件句柄 </span><br><span class="line">``` </span><br><span class="line">管道也是文件 </span><br><span class="line">匿名管道 </span><br><span class="line">``` xxx | yyy</span><br></pre></td></tr></table></figure><p>命名管道</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/fifo1 </span><br><span class="line">```  </span><br><span class="line">使用管道 </span><br><span class="line">``` bash</span><br><span class="line"><span class="comment">#终端a </span></span><br><span class="line">grep aaa /tmp/fifo1  <span class="comment">#如果管道中没东西会卡住 </span></span><br><span class="line"><span class="comment">#终端b </span></span><br><span class="line">ll /dev &gt; /tmpfifo1 </span><br><span class="line">``` </span><br><span class="line">控制并发的数量 </span><br><span class="line">``` bash</span><br><span class="line"><span class="meta">#!/usr/bin/bash </span></span><br><span class="line">thread = 5 </span><br><span class="line">tmp_fifofile = /tmp/2$/fifo</span><br><span class="line">mkfifo <span class="variable">$tmp_fifofile</span></span><br><span class="line"><span class="built_in">exec</span> 8 &lt;&gt; <span class="variable">$tmp_fifofile</span></span><br><span class="line">rm <span class="variable">$tmp</span> &gt; fifofile</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq <span class="variable">$thread</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> &gt;&amp;8</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..254&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -u 8    <span class="comment">#-u 后面接的是文件描述符</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">echo</span> &gt;&amp;8</span><br><span class="line">    &#125;&amp;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>删除ssh指纹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /root/.ssh/known_hosts  <span class="comment">#删除掉对应的行</span></span><br></pre></td></tr></table></figure><p>except的用法<br>包括bash中嵌入except用法<br>-EOF中不能有一个空格，必须全部tab键来进行缩进<br>如果expect没有装 就装<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190821150456.png" alt></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -P &quot;&quot; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190821145950.png" alt></p><p>还可以在spawn上面 加上 set timeout 10 设置一下超时时间</p><p>expect 中的位置变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> ip [lindex <span class="variable">$argv</span> 0]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/expect </span></span><br><span class="line"><span class="built_in">set</span> ip [lindex <span class="variable">$argv</span> 0] </span><br><span class="line"><span class="built_in">set</span> user root </span><br><span class="line"><span class="built_in">set</span> password centos </span><br><span class="line"><span class="built_in">set</span> timeout 5 </span><br><span class="line"> </span><br><span class="line">spawn ssh <span class="variable">$user</span>@<span class="variable">$ip</span> </span><br><span class="line"> </span><br><span class="line">expect &#123;  </span><br><span class="line"><span class="string">"yes/no"</span> &#123; send <span class="string">"yes\r"</span>; exp_continue &#125;  </span><br><span class="line"><span class="string">"password:"</span> &#123; send <span class="string">"<span class="variable">$password</span>\r"</span> &#125;; </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">#interact expect "#" </span></span><br><span class="line">send <span class="string">"useradd yangyang\r"</span> </span><br><span class="line">send <span class="string">"pwd\r"</span> send <span class="string">"exit\r"</span> </span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><h4 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array2=(tom jack alice) </span><br><span class="line">array3=(`cat /etc/passwd`) 希望是将该文件中的每一个行作为一个元数赋 值给数组 array3 </span><br><span class="line">array4=(`ls /var/ftp/Shell/<span class="keyword">for</span>*`) </span><br><span class="line">array5=(tom jack alice <span class="string">"bash shell"</span>) </span><br><span class="line">colors=(<span class="variable">$red</span> <span class="variable">$blue</span> <span class="variable">$green</span> <span class="variable">$recolor</span>) </span><br><span class="line">array5=(1 2 3 4 5 6 7 <span class="string">"linux shell"</span> [20]=puppet)</span><br><span class="line">关联数组 <span class="comment">#declare -A ass_array1='([index4]="peach" [index1]="pear" [index2]="apple" [index3]="orange" )</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ass_array2[index2]&#125;</span> 访问数组中的第二个元数 </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;ass_array2[@]&#125;</span> 访问数组中所有元数 等同于 <span class="built_in">echo</span> <span class="variable">$&#123;array1[*]&#125;</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#ass_array2[@]&#125;</span> 获得数组元数的个数</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!ass_array2[@]&#125;</span> 获得数组元数的索引</span><br><span class="line"><span class="comment"># 使用切片取值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array1[@]:1:2&#125;</span></span><br></pre></td></tr></table></figure><p>数组的遍历</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$&#123;!array[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$i</span>: <span class="variable">$&#123;array[i]&#125;</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>函数<br>函数的返回值默认是最后一条指令的返回值<br>如果手动返回，则返回值不能超过255<br>如果想返回其他的结果可以通过设置外部变量的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这叫函数的输出</span><br><span class="line">func()&#123;</span><br><span class="line">    echo $[2*$1]</span><br><span class="line">&#125;</span><br><span class="line">result=`func 123`</span><br></pre></td></tr></table></figure><p>传数组怎么处理<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190821173310.png" alt></p><p>输出一个数组<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190821174533.png" alt></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit 退出整个程序</span><br><span class="line">shift 使位置变量左移，$2变成$1,$3变成$2,$#也会减1</span><br><span class="line">shift 1</span><br><span class="line">shift 2</span><br></pre></td></tr></table></figure><p>vim</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">不含元字符的替换</span><br><span class="line">:%s/tom/Tom/g    <span class="comment">#%s相当于全文相当于1,$，g表示全局</span></span><br><span class="line">含元字符的替换</span><br><span class="line">:%s/\&lt;[tT]om\TOM&gt;/g    词首\&lt; 词尾\&gt; </span><br><span class="line">:%s/\(10.18.40.\)100/\1200/g    \1代表前面第一个括号内的内容</span><br><span class="line">:1,$ s\\\</span><br></pre></td></tr></table></figure><p>grep</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-q  表示不输出</span><br><span class="line">grep 返回值</span><br><span class="line">    0 找到了</span><br><span class="line">    1 没找到</span><br><span class="line">    2 文件不存在</span><br><span class="line">-i  忽略大小写</span><br><span class="line">-v  去反</span><br><span class="line">-r  -R  递归</span><br><span class="line">-o  只显示匹配的</span><br><span class="line">-A1  打印匹配的后面的1行</span><br><span class="line">-B1  打印匹配的前面的1行</span><br><span class="line">-C1  打印匹配上下的1行</span><br><span class="line">-l   列出匹配的文件名</span><br><span class="line">-n   列出所在文件的行数</span><br><span class="line"></span><br><span class="line">vim xxx.txt +n   <span class="comment">#直接定位到行</span></span><br><span class="line">找目录</span><br><span class="line">ll || grep <span class="string">'^d'</span></span><br></pre></td></tr></table></figure><p>egrep 可以把扩展字符不带斜线  &lt;&gt;除外</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed 只有模式命令出现语法错误的时候才会是非0 否则都是0</span><br><span class="line"></span><br><span class="line">sed ! 对所选行以外的所有行应用命令 </span><br><span class="line"></span><br><span class="line">sed -r <span class="string">''</span> pasword</span><br><span class="line">sed -r -n <span class="string">''</span> password   <span class="comment">#默认会打印，-n取消默认的打印</span></span><br><span class="line">sed -rn <span class="string">'/^root/p'</span> password  </span><br><span class="line">-n p 一般不用特别关注，因为默认都是交给后面的命令打印的</span><br><span class="line"></span><br><span class="line">sed -r <span class="string">'s/root/alice/g'</span></span><br><span class="line">sed -r <span class="string">'s/root/&amp;alice/g'</span>   <span class="comment">#&amp;代表前面匹配到的内容</span></span><br><span class="line">将/换成<span class="comment">#</span></span><br><span class="line">sed -r <span class="string">'\#root#d'</span>           这种情况下需要转义</span><br><span class="line">sed -r <span class="string">'s#root#alice#'</span>        这种情况下不需要转义</span><br><span class="line"></span><br><span class="line">sed地址</span><br><span class="line">可以是数字、正则表达式或者是二者的结合</span><br><span class="line">sed -r <span class="string">'d'</span></span><br><span class="line">sed -r <span class="string">'3d'</span></span><br><span class="line">sed -r <span class="string">'1,3d'</span></span><br><span class="line">sed -r <span class="string">'1,$d'</span></span><br><span class="line">sed -r <span class="string">'/root/,5d'</span>   <span class="comment">#在第二个斜线后面可以结合上面的</span></span><br><span class="line">从每次匹配到root开始删除到第5行</span><br><span class="line">sed -r <span class="string">'/root/,+5d'</span></span><br><span class="line">从每次匹配到root开始删除5行</span><br><span class="line"></span><br><span class="line">sed多个命令</span><br><span class="line">sed -r <span class="string">'3d'</span> </span><br><span class="line">sed -r <span class="string">'3&#123;h;d&#125;'</span>  或者 <span class="string">'3h;3d'</span>   <span class="comment">#同一行多个命令</span></span><br><span class="line"></span><br><span class="line">sed -r <span class="string">'2r /etc/password'</span>   <span class="comment">#在第二行的时候读入</span></span><br><span class="line">sed -r <span class="string">'/root/w /etc/password'</span> <span class="comment">#将root匹配到的行写入到文件</span></span><br><span class="line">sed -r <span class="string">'/root/a11111111'</span>   <span class="comment">#将匹配的root行追加1111111</span></span><br><span class="line">sed -r <span class="string">'/root/i11111111'</span>   <span class="comment">#将匹配的root行前面插入1111111</span></span><br><span class="line">sed -r <span class="string">'/root/c11111111'</span>   <span class="comment">#将匹配的root行整行替换成1111111</span></span><br><span class="line">vim</span><br><span class="line">:r /ect/password</span><br><span class="line">将这个文件读入到光标位置</span><br><span class="line"></span><br><span class="line">a 在当前行后添加一行或多行 </span><br><span class="line">c 用新文本修改（替换）当前行中的文本 </span><br><span class="line">d 删除行 i 在当前行之前插入文本 </span><br><span class="line">l 列出非打印字符 </span><br><span class="line">p 打印行 </span><br><span class="line">n 读入下一输入行，并从下一条命令而不是第一条命令开始对其的处理 </span><br><span class="line">q 结束或退出 </span><br><span class="line"></span><br><span class="line">h 从模式空间取出，覆盖到暂存空间</span><br><span class="line">H 从模式空间取出，追加到暂存空间</span><br><span class="line">g 从暂存空间取回，覆盖到模式空间</span><br><span class="line">G 从暂存空间取回，追加到模式空间</span><br></pre></td></tr></table></figure><p>暂存空间默认会有一个换行</p><p>awk 是一种编程语言<br>awk [options] commands filenames</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">默认按空格和tab分隔</span><br><span class="line"></span><br><span class="line">-F 指定分隔符</span><br><span class="line"></span><br><span class="line">命令出现三段</span><br><span class="line">awk <span class="string">'BEGIN&#123;&#125;&#123;&#125;END&#123;&#125;'</span></span><br><span class="line">BEGIN:发生在读文件之前</span><br><span class="line">END:发生读文件之后</span><br><span class="line"></span><br><span class="line">awk <span class="string">'BEGIN&#123;FS=":";OFS="----"&#125;&#123;print $1,$2&#125;'</span> passwd <span class="comment">#FS是输入的分隔符 OFS是输出的分隔符</span></span><br><span class="line">awk <span class="string">'pattern&#123;action&#125;'</span></span><br><span class="line">awk <span class="string">'$4&gt;25000&#123;print $4&#125;'</span></span><br><span class="line"></span><br><span class="line">整行是<span class="variable">$0</span>,然后每列对应的$列</span><br><span class="line">NR   总记录的number</span><br><span class="line">FNR  当前记录文件的number</span><br><span class="line">NF   这行一共多少个字段</span><br><span class="line"><span class="variable">$NF</span>  最后一个字段</span><br><span class="line"></span><br><span class="line">FS                    默认按空格和tab分隔</span><br><span class="line">OFS                     默认是空格</span><br><span class="line">RS                   输入记录分隔符</span><br><span class="line">ORS                    输出记录分隔符</span><br></pre></td></tr></table></figure><p>awk 条件输出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;if($3==0)&#123;i++&#125; else if($3&gt;999)&#123;k++&#125; else&#123;j++&#125;&#125; END&#123;print i; print k; print j&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>awk 循环</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;i=1; while(i&lt;=NF)&#123;print $i; i++&#125;&#125;'</span> /etc/hosts</span><br></pre></td></tr></table></figure><p>awk 数组</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -F: <span class="string">'&#123;username[++i]=$1&#125; END&#123;print username[1]&#125;'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>awk 数组按索引遍历</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># awk -F: '&#123;username[++x]=$1&#125; END&#123;for(i in username) &#123;print i,username[i]&#125; &#125;' /etc/passwd</span></span><br></pre></td></tr></table></figure><p>awk 数组字符串</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -an |grep :80 |awk <span class="string">'&#123;access_stat[$2]++&#125; END&#123;for(i in access_stat)&#123;print i,access_stat[i]&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>awk 自定义变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">awk -v my_name=<span class="string">"ghostwu"</span> <span class="string">'BEGIN&#123;print my_name&#125;'</span></span><br><span class="line">awk <span class="string">'BEGIN&#123; my_name="ghost"; my_age=22; my_sex="男"; print my_name, my_age, my_sex&#125;'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.8.20-星期二</title>
      <link href="/posts/6d1c7e53/"/>
      <url>/posts/6d1c7e53/</url>
      
        <content type="html"><![CDATA[<h4 id="为kali安装vbox增强"><a class="markdownIt-Anchor" href="#为kali安装vbox增强"></a> 为kali安装vbox增强</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y linux-headers-$(uname-r)</span><br><span class="line">cp /media/<span class="built_in">cd</span>-rom/VBoxLinuxAdditions.run /root/</span><br><span class="line">chmod 755 /root/VBoxLinuxAdditions.run</span><br><span class="line"><span class="built_in">cd</span>/root</span><br><span class="line">./VBoxLinuxAdditions.run</span><br></pre></td></tr></table></figure><h4 id="子域名获取的思路"><a class="markdownIt-Anchor" href="#子域名获取的思路"></a> 子域名获取的思路</h4><p>每个工具获取的结果都放在<br>/root/subdomain_data/xxx.com/collectors/xxx/*.txt</p><p>最后massdns汇总，输出到<br>/root/subdomain_data/xxx.com/output/*.txt</p><p>将结果录入到数据库</p><p>然后生成截图到<br>/root/subdomain_data/xxx.com/<br>或者根据界面选择生成截图</p><p>管道和函数之间如何传参<br><a href="https://www.cnblogs.com/cc11001100/p/8974895.html" title="Linux Shell管道调用用户定义函数" target="_blank" rel="noopener">Linux Shell管道调用用户定义函数</a><br>管道和python之间如何传参</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> fileinput.input() <span class="keyword">as</span> f_input:</span><br><span class="line">     <span class="keyword">for</span> line <span class="keyword">in</span> f_input:</span><br><span class="line">         print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>使用的时候就可以这样使用了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls ~ | python3 filein.py</span><br></pre></td></tr></table></figure><p>创建多级目录<br>mkdir -p dir1/dir2<br><a href="https://zhuanlan.zhihu.com/p/61890472" title="如何优雅地创建重定向路径中不存在的父目录" target="_blank" rel="noopener">如何优雅地创建重定向路径中不存在的父目录</a></p><h4 id="xshell颜色"><a class="markdownIt-Anchor" href="#xshell颜色"></a> xshell颜色</h4><p><code>~/.bashrc</code>没有执行 在 <code>~/.bash_profile</code> 上判断一下即可:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">      . ~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>段子<br>中午一起床就觉得有点类了</p><h4 id="shell学习"><a class="markdownIt-Anchor" href="#shell学习"></a> shell学习</h4><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190820162754.png" alt></p><p>!da  执行以da开头的历史命令<br>!$   上一个参数<br>!!   上一个命令</p><p>使用\cp 可以跳过别名，否则默认执行的是别名 cp -i</p><p>ctrl+R  搜索历史命令<br>sleep 6000 &amp;<br>命令到后端执行，但是终端关闭的时候也关闭<br>nohub sleep 6000 &amp;<br>当终端关闭的时候也不关闭</p><p>作业控制</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl z 将当前正在执行的作业放到后台</span><br><span class="line">fg     返回到前台</span><br><span class="line">bg     查看后台的作业</span><br><span class="line">kill %3  杀掉作业号为3的作业</span><br></pre></td></tr></table></figure><p>screen</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen -S name        创建一个名字为name的会话</span><br><span class="line">screen -r name        进入到指定的会话</span><br><span class="line">screen -list          列出当前的会话</span><br><span class="line">ctrl+a d              退出当前会话</span><br></pre></td></tr></table></figure><p>重定向</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0    临时标准输入</span><br><span class="line">1    输出</span><br><span class="line">2    错误</span><br><span class="line"></span><br><span class="line"><span class="variable">$cat</span> &gt;&gt; myfile &lt;&lt;MAYDAY   //直到遇到字符串“MAYDAY”,会停止输入</span><br><span class="line">&gt; Hello there I am using a <span class="variable">$TERIM</span> terminal </span><br><span class="line">&gt; and my user name is <span class="variable">$LOGNAME</span> </span><br><span class="line">&gt; <span class="built_in">bye</span>... </span><br><span class="line">&gt; MAYDAY</span><br><span class="line"></span><br><span class="line">grep <span class="string">"trident"</span> missiles 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1，即和1重定向的文件系统上的位置是一样的</span><br></pre></td></tr></table></figure><p>command &gt; filename 2&gt;&amp;1               把标准输出和标准错误一起重定向到filename文件中(覆盖)<br>command &gt;&gt; filename <strong>2&gt;&amp;1</strong>            把标准输出和标准错误<strong>一起重定向到filename文件</strong>中(追加)<br>command &lt; filename &gt;filename2        把文件filename中的内容作为command的输入，把标准输出重定向到filename2文件中<br>command 0&lt; filename 1&gt; filename2   同上</p><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190820170019.png" alt></p><p>tee a.txt<br>tee -a  a.txt  追加到tee中</p><h4 id="命令的排序"><a class="markdownIt-Anchor" href="#命令的排序"></a> 命令的排序</h4><p>./configure &amp;&amp; make  前一个命令返回0（执行成功） 后面的才会执行<br>./configure || make  前一个命令返回非0（执行失败） 后面的命令才会执行</p><p>mkdir -p 多级目录<br>ls /path/aaa || makdir -p /path/aaa</p><p>ping -c1 192.168.0.1 &gt; /dev/null &amp;&amp; echo “is up” || echo “is down”</p><p>shell 中 &amp;&gt; 和&gt;的区别<br>&amp;&gt; 表示把1和2都重定向了<br>&gt;表示只有1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$$ ：Shell本身的PID（ProcessID） </span><br><span class="line">$! ：Shell最后运行的后台Process的PID </span><br><span class="line">$? ：最后运行的命令的结束代码（返回值） </span><br><span class="line">$- ：使用Set命令设定的Flag一览 </span><br><span class="line">$* ：所有参数列表。如<span class="string">"$*"</span>用「\<span class="string">"」括起来的情况、以"</span><span class="variable">$1</span> <span class="variable">$2</span> … <span class="variable">$n</span><span class="string">"的形式输出所有参数。 </span></span><br><span class="line"><span class="string"><span class="variable">$@</span> ：所有参数列表。如"</span><span class="variable">$@</span><span class="string">"用「\"」括起来的情况、以"</span><span class="variable">$1</span><span class="string">" "</span><span class="variable">$2</span><span class="string">" … "</span><span class="variable">$n</span><span class="string">" 的形式输出所有参数。 </span></span><br><span class="line"><span class="string"><span class="variable">$#</span> ：添加到Shell的参数个数 </span></span><br><span class="line"><span class="string"><span class="variable">$0</span> ：Shell本身的文件名 </span></span><br><span class="line"><span class="string"><span class="variable">$1</span>～<span class="variable">$n</span> ：添加到Shell的各参数值。<span class="variable">$1</span>是第1参数、<span class="variable">$2</span>是第2参数…。</span></span><br></pre></td></tr></table></figure><p>true 的返回值一直为真<br>false 的返回值 一直为假</p><h4 id="文件比较运算符"><a class="markdownIt-Anchor" href="#文件比较运算符"></a> 文件比较运算符</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e filename 如果 filename存在，则为真 [ -e /var/<span class="built_in">log</span>/syslog ]</span><br><span class="line">-d filename 如果 filename为目录，则为真 [ -d /tmp/mydir ]</span><br><span class="line">-f filename 如果 filename为常规文件，则为真 [ -f /usr/bin/grep ]</span><br><span class="line">-L filename 如果 filename为符号链接，则为真 [ -L /usr/bin/grep ]</span><br><span class="line">-r filename 如果 filename可读，则为真 [ -r /var/<span class="built_in">log</span>/syslog ]</span><br><span class="line">-w filename 如果 filename可写，则为真 [ -w /var/mytmp.txt ]</span><br><span class="line">-x filename 如果 filename可执行，则为真 [ -L /usr/bin/grep ]</span><br><span class="line">filename1-nt filename2 如果 filename1比 filename2新，则为真 [ /tmp/install/etc/services -nt /etc/services ]</span><br><span class="line">filename1-ot filename2 如果 filename1比 filename2旧，则为真 [ /boot/bzImage -ot arch/[i386](https://www.baidu.com/s?wd=i386&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)/boot/bzImage ]</span><br><span class="line">[! -d filepath]  取非</span><br></pre></td></tr></table></figure><h4 id="字符串比较运算符-请注意引号的使用这是防止空格扰乱代码的好方法"><a class="markdownIt-Anchor" href="#字符串比较运算符-请注意引号的使用这是防止空格扰乱代码的好方法"></a> 字符串比较运算符 （请注意引号的使用，这是防止空格扰乱代码的好方法）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-z string 如果 string长度为零，则为真 [ -z <span class="string">"<span class="variable">$myvar</span>"</span> ]</span><br><span class="line">-n string 如果 string长度非零，则为真 [ -n <span class="string">"<span class="variable">$myvar</span>"</span> ]</span><br><span class="line">string1= string2 如果 string1与 string2相同，则为真 [ <span class="string">"<span class="variable">$myvar</span>"</span> = <span class="string">"one two three"</span> ]</span><br><span class="line">string1!= string2 如果 string1与 string2不同，则为真 [ <span class="string">"<span class="variable">$myvar</span>"</span> != <span class="string">"one two three"</span> ]</span><br></pre></td></tr></table></figure><h4 id="shell的通配符"><a class="markdownIt-Anchor" href="#shell的通配符"></a> shell的通配符</h4><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190820173951.png" alt></p><p>在子shell执行<br>/script.sh<br>bash script</p><p>在当前shell中执行<br>source <a href="http://script.sh" target="_blank" rel="noopener">script.sh</a><br>. <a href="http://script.sh" target="_blank" rel="noopener">script.sh</a></p><h4 id="echo-输出带颜色的脚本"><a class="markdownIt-Anchor" href="#echo-输出带颜色的脚本"></a> echo 输出带颜色的脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>  -e（能解释后面的特殊符号）</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\e[1;31mThis is red text[0m"</span>  <span class="comment"># 打印出来的是红色</span></span><br><span class="line">这里的31 代表的是颜色  0 代表颜色的重置</span><br><span class="line"></span><br><span class="line"><span class="comment">#字体颜色：30m-37m 黑、红、绿、黄、蓝、紫、青、白</span></span><br><span class="line">str=<span class="string">"kimbo zhang"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[30m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 黑色字体</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[31m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 红色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[32m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 绿色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[33m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 黄色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[34m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 蓝色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[35m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 紫色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[36m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 青色</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[37m <span class="variable">$&#123;str&#125;</span>\033[0m"</span>      <span class="comment">## 白色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#背景颜色：40-47 黑、红、绿、黄、蓝、紫、青、白</span></span><br><span class="line">str=<span class="string">"kimbo zhang"</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[41;37m <span class="variable">$&#123;str&#125;</span> \033[0m"</span>     <span class="comment">## 红色背景色，白色字体</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[41;33m <span class="variable">$&#123;str&#125;</span> \033[0m"</span>     <span class="comment">## 红底黄字</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[1;41;33m <span class="variable">$&#123;str&#125;</span> \033[0m"</span>   <span class="comment">## 红底黄字 高亮加粗显示</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[5;41;33m <span class="variable">$&#123;str&#125;</span> \033[0m"</span>   <span class="comment">## 红底黄字 字体闪烁显示</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[47;30m <span class="variable">$&#123;str&#125;</span> \033[0m"</span>     <span class="comment">## 白底黑字</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\033[40;37m <span class="variable">$&#123;str&#125;</span> \033[0m"</span>     <span class="comment">## 黑底白字</span></span><br></pre></td></tr></table></figure><p>自定义变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义变量:变量名=变量值变量名必须以字母或下划线开头,区分大小写ip=192.168.2.115</span><br><span class="line">引用变量:$变量名或<span class="variable">$&#123;变量名&#125;</span></span><br><span class="line">查看变量:<span class="built_in">echo</span>$变量名 <span class="built_in">set</span>(所有变量:包括自定义变量和环境变量) </span><br><span class="line">取消变量: <span class="built_in">unset</span>变量名  作用范围:仅在当前shel中有效</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> ip 等待手动输入并赋值变量</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"please input a ip: "</span> ip  有提示的输入</span><br></pre></td></tr></table></figure><p>环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义环境变量：方法一<span class="built_in">export</span> back_dir2=/home/backup</span><br><span class="line">             方法二<span class="built_in">export</span> back_dir1自定义变量转换成环境变量引用环境变量：$变量名或&#123;变量名&#125;</span><br><span class="line">查看环境变量：<span class="built_in">echo</span>$变量名 env 例如env Igrep back_dir2</span><br><span class="line">取消环境变量：<span class="built_in">unset</span> 变量名</span><br><span class="line">变量作用范围：在当前shell和子shell有效</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ $? -eq 0];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"is up"</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"is down"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>坑:定义变量的时候变量后面不能有空格<br>坑2:执行[]条件时  “[” 的后面和 “]” 的前面必须有空格</p><h4 id="jq"><a class="markdownIt-Anchor" href="#jq"></a> jq</h4><p>jq “.[].name_value”   # 先遍历再取出name_value</p>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.8.19-星期一</title>
      <link href="/posts/5a4fbc8f/"/>
      <url>/posts/5a4fbc8f/</url>
      
        <content type="html"><![CDATA[<h3 id="linux终端的快捷键"><a class="markdownIt-Anchor" href="#linux终端的快捷键"></a> Linux终端的快捷键</h3><p>移动到行首:Ctrl + A<br>移动到行尾:Ctrl + E<br>删除到行首:Ctrl + U<br>删除到行尾:Ctrl + K<br>删除一个单词:Ctrl + W<br>粘贴刚才删除的单词:Ctrl + Y</p>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker+PhpStorm远程调试php</title>
      <link href="/posts/2077109e/"/>
      <url>/posts/2077109e/</url>
      
        <content type="html"><![CDATA[<h2 id="本文章组织架构"><a class="markdownIt-Anchor" href="#本文章组织架构"></a> 本文章组织架构:</h2><p>host&gt;vbox-ubuntu&gt;docker<br><em>docker是跑在虚拟机中的</em></p><p>host:10.10.44.197<br>ubuntu:10.10.44.219</p><h2 id="先把ssh的端口22暴露出来"><a class="markdownIt-Anchor" href="#先把ssh的端口22暴露出来"></a> 先把ssh的端口22暴露出来</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &apos;2&apos;</span><br><span class="line">services:</span><br><span class="line">  discuz:</span><br><span class="line">    image: vulhub/discuz:7.2</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:80&quot;</span><br><span class="line">      - &quot;22:22&quot;</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.5</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: root</span><br><span class="line">      MYSQL_DATABASE: discuz</span><br></pre></td></tr></table></figure><h2 id="apt-update"><a class="markdownIt-Anchor" href="#apt-update"></a> apt update</h2><h3 id="首先应该更新源因为系统中没有vim和vi所以采用下面的方式来更新"><a class="markdownIt-Anchor" href="#首先应该更新源因为系统中没有vim和vi所以采用下面的方式来更新"></a> 首先应该更新源，因为系统中没有vim和vi，所以采用下面的方式来更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv /etc/apt/sources.list /etc/apt/sources.list.bak    </span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br><span class="line">echo &quot;deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list</span><br></pre></td></tr></table></figure><h3 id="然后apt-update会出现没有公钥的情况"><a class="markdownIt-Anchor" href="#然后apt-update会出现没有公钥的情况"></a> 然后apt update,会出现没有公钥的情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">W: GPG error: http://mirrors.aliyun.com trusty-security InRelease: The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32</span><br></pre></td></tr></table></figure><p>我们需要先在公钥服务器中获取公钥，缺几个获取几个</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32 40976EAF437D05B5</span><br></pre></td></tr></table></figure><p>公钥服务器还有其他的，我这里用的Ubuntu的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyserver.ubuntu.com</span><br><span class="line">pgp.mit.edu</span><br><span class="line">subkeys.pgp.net</span><br><span class="line">www.gpg-keyserver.de</span><br></pre></td></tr></table></figure><p>然后apt update 即可 update成功</p><h2 id="安装ssh"><a class="markdownIt-Anchor" href="#安装ssh"></a> 安装ssh</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install openssh-server</span><br><span class="line">apt install vim  </span><br><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>进行如下修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin without-password</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><p>此时可能不知道root的密码<br>可用 <code>passwd root</code>修改</p><h2 id="安装xdebug"><a class="markdownIt-Anchor" href="#安装xdebug"></a> 安装Xdebug</h2><p>对应的安装版本如下:<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725153708.png" alt></p><p>到这里找对应的版本进行下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://pecl.php.net/package/xdebug</span><br></pre></td></tr></table></figure><p>或者先下载下来，复制进去,然后进入到所在目录</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pecl install xdebug-2.5.5.tgz</span><br></pre></td></tr></table></figure><p>配置php.ini</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /usr/local/etc/php/php.ini</span><br><span class="line">如果不对可以先find一下php，phpini本来是没有的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[xdebug]</span><br><span class="line">zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so</span><br><span class="line">xdebug.remote_enable = On</span><br><span class="line">xdebug.profiler_enable = On</span><br><span class="line">xdebug.auto_trace=On</span><br><span class="line">xdebug.profiler_enable_trigger = On</span><br><span class="line">xdebug.show_local_vars=0</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.remote_host=10.10.44.197</span><br></pre></td></tr></table></figure><p>重启一下容器使之生效，注意这里需要再次启动ssh</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><h2 id="设置-phpstorm"><a class="markdownIt-Anchor" href="#设置-phpstorm"></a> 设置 PhpStorm</h2><h3 id="加入项目"><a class="markdownIt-Anchor" href="#加入项目"></a> 加入项目</h3><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/WeChatc5c33ebb4235cc66dab25b1a244cea5e.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725154342.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725154607.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725154633.png" alt></p><h3 id="设置远程调试"><a class="markdownIt-Anchor" href="#设置远程调试"></a> 设置远程调试</h3><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725152549.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725152745.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725152806.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725152839.png" alt></p><h2 id="安装chrome插件-xdebughelper"><a class="markdownIt-Anchor" href="#安装chrome插件-xdebughelper"></a> 安装chrome插件 XdebugHelper</h2><p>直接从谷歌应用市场搜即可<br>右键插件-&gt;选项，设置key<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190725153315.png" alt></p><p>然后打开插件，打上断点即可</p><h2 id="坑一开启docker出现端口占用的情况"><a class="markdownIt-Anchor" href="#坑一开启docker出现端口占用的情况"></a> 坑一:开启docker出现端口占用的情况</h2><p>lsof -i :8080 搜不出来<br>必须得加sudo才能搜出来</p><p>搜出来是jekins，kill掉之后还会重新创建<br>必须直接关闭jekins服务</p><p>mac 启动关闭jekins</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动</span><br><span class="line">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br><span class="line">关闭</span><br><span class="line">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.7.24-星期三</title>
      <link href="/posts/a378cd57/"/>
      <url>/posts/a378cd57/</url>
      
        <content type="html"><![CDATA[<h2 id="如何配置phpstudyphpstormxdebug调试环境"><a class="markdownIt-Anchor" href="#如何配置phpstudyphpstormxdebug调试环境"></a> *如何配置phpstudy+phpstorm+xdebug调试环境</h2><p><a href="https://www.jianshu.com/p/5f5eee692431" target="_blank" rel="noopener">&lt;&lt;phpstorm+phpstudy+xdbug断点调试&gt;&gt;</a></p><p>坑：配置完之后 重启phpstudy才会生效</p>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.7.23-星期二</title>
      <link href="/posts/3d1c58f4/"/>
      <url>/posts/3d1c58f4/</url>
      
        <content type="html"><![CDATA[<p>[#linux#]</p><h2 id="screen-相关命令"><a class="markdownIt-Anchor" href="#screen-相关命令"></a> screen 相关命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class="line">screen -ls -&gt; 列出当前所有的session</span><br><span class="line">screen -r yourname -&gt; 回到yourname这个session</span><br><span class="line">Ctrl+A D 跳出当前会话</span><br></pre></td></tr></table></figure><h2 id="ubuntu-设置su的密码"><a class="markdownIt-Anchor" href="#ubuntu-设置su的密码"></a> ubuntu 设置su的密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><h2 id="linux-修改path"><a class="markdownIt-Anchor" href="#linux-修改path"></a> linux 修改path</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">    PATH = $PATH:/**/bin   #注意这里应该是个路径而不是文件</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="linux-查找文件"><a class="markdownIt-Anchor" href="#linux-查找文件"></a> linux 查找文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find / -name keyword</span><br></pre></td></tr></table></figure><h2 id="vbox-kali共享文件夹"><a class="markdownIt-Anchor" href="#vbox-kali共享文件夹"></a> vbox kali共享文件夹</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@kkkk:~/Documents# mkdir /mnt/share</span><br><span class="line">root@kkkk:~/Documents# mount -t vboxsf share /mnt/share/   #-t指定漏洞形态</span><br><span class="line">root@kkkk:~/Documents# cd /mnt/share/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019.7.22-星期一</title>
      <link href="/posts/4a1b6862/"/>
      <url>/posts/4a1b6862/</url>
      
        <content type="html"><![CDATA[<p>[#docker#]</p><h2 id="1-实现了博客对anki的转换"><a class="markdownIt-Anchor" href="#1-实现了博客对anki的转换"></a> *1. 实现了博客对Anki的转换</h2><ul><li>在标题上，前面加*即为不计入anki</li><li>在标题上，后面加[#tag1,tag2#]通过这种方式设置生成anki的tag</li><li>在内容上, 通过(#answer#) 设置填空</li></ul><h2 id="docker-和镜像相关的命令"><a class="markdownIt-Anchor" href="#docker-和镜像相关的命令"></a> docker 和镜像相关的命令</h2><h3 id="列出镜像"><a class="markdownIt-Anchor" href="#列出镜像"></a> 列出镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列出镜像: (#docker images #): </span><br><span class="line">      参数:</span><br><span class="line">          (#-a#)          列出本地所有镜像，含中间镜像层</span><br><span class="line">          (#-q #)         只显示id</span><br><span class="line">          (#--no-trunc#)  不截断</span><br></pre></td></tr></table></figure><h3 id="搜索镜像"><a class="markdownIt-Anchor" href="#搜索镜像"></a> 搜索镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">搜索镜像: docker search</span><br><span class="line">      参数：</span><br><span class="line">          (#-s  30#)          设置点赞数超过30</span><br><span class="line">          (#--no-trunc#)      不截断</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a class="markdownIt-Anchor" href="#删除镜像"></a> 删除镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除镜像: (#docker rmi -f 镜像名字:TAG 镜像名字2:TAG2#)</span><br><span class="line">        这里的-f是指(#强制删除#)</span><br></pre></td></tr></table></figure><h3 id="删除全部镜像"><a class="markdownIt-Anchor" href="#删除全部镜像"></a> 删除全部镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除全部镜像:</span><br><span class="line">(#docker rmi -f $(docker images -q)#)</span><br></pre></td></tr></table></figure><h2 id="docker-和容器相关的命令"><a class="markdownIt-Anchor" href="#docker-和容器相关的命令"></a> docker 和容器相关的命令</h2><h3 id="启动容器"><a class="markdownIt-Anchor" href="#启动容器"></a> 启动容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">从镜像启动容器</span><br><span class="line"> docker run [options] image [command][arg...]</span><br><span class="line">        (#--name=&quot;newname&quot;#) 为容器指定一个名称</span><br><span class="line">        (#-d#)               后台运行容器,注意:(#容器需要一个守护进程#)</span><br><span class="line">        (#-it#)              交互式运行</span><br><span class="line">        (#-P#)               随机端口</span><br><span class="line">        (#-p#)               指定端口映射    hostPort:containerPort</span><br><span class="line">        (#-e#)               设置环境变量</span><br><span class="line">从容器启动容器:</span><br><span class="line">        (#docker start 容器id#)</span><br></pre></td></tr></table></figure><h3 id="列出所有容器"><a class="markdownIt-Anchor" href="#列出所有容器"></a> 列出所有容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(#docker ps#)</span><br><span class="line">    (#-a#) 列出正在运行的和历史上运行的</span><br><span class="line">    (#-l#) 列出上一个容器</span><br><span class="line">    (#-n 3#) 上3次运行的</span><br><span class="line">    (#-q#) 只显示容器编号</span><br></pre></td></tr></table></figure><h3 id="退出容器"><a class="markdownIt-Anchor" href="#退出容器"></a> 退出容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(#exit#)  在交互式伪终端输入，直接退出</span><br><span class="line">(#ctrl+p+q#)</span><br><span class="line">(#docker stop 容器id#)   温柔的关闭</span><br><span class="line">(#docker kill 容器id#)   强制关闭</span><br></pre></td></tr></table></figure><h3 id="删除已停止的容器"><a class="markdownIt-Anchor" href="#删除已停止的容器"></a> 删除已停止的容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(#docker rm 容器id#)  删除一个容器</span><br><span class="line">(#docker rm -f $(docker ps -a -q)#)  删除多个容器</span><br></pre></td></tr></table></figure><h3 id="docker-查看容器相关命令"><a class="markdownIt-Anchor" href="#docker-查看容器相关命令"></a> docker 查看容器相关命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看容器日志</span><br><span class="line">(#docker logs  容器id #) </span><br><span class="line">    (#-t#)         加入时间戳</span><br><span class="line">    (#-f#)         跟随最新的日志打印</span><br><span class="line">    (#--tail#)     数字  显示最后多少条</span><br><span class="line"></span><br><span class="line">查看容器内的进程</span><br><span class="line">(#docker top  容器id#)</span><br><span class="line"></span><br><span class="line">查看容器 内部细节</span><br><span class="line">(#docker inspect 容器id#)</span><br></pre></td></tr></table></figure><h2 id="docker-操作容器"><a class="markdownIt-Anchor" href="#docker-操作容器"></a> docker 操作容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进入正在运行的容器，并以交互式终端</span><br><span class="line">(#docker attach 容器id #)   =  (#docker exec -t 容器id /bin/bash#)</span><br><span class="line"></span><br><span class="line">不进入容器，直接执行命令，并在外面获取结果</span><br><span class="line">(#docker exec -t 容器id ls#)         -t的作用是伪终端，实际是使回显更好看</span><br><span class="line"></span><br><span class="line">从容器内拷贝文件到主机上</span><br><span class="line">(#docker cp 容器id:容器内路径 主机路径#)</span><br><span class="line"></span><br><span class="line">提交</span><br><span class="line">(#docker commit -m &quot;提交信息&quot; -a &quot;作者&quot; 容器id 前缀/容器新名字:TAG#)</span><br></pre></td></tr></table></figure><h2 id="docker-操作数据卷"><a class="markdownIt-Anchor" href="#docker-操作数据卷"></a> docker 操作数据卷</h2><h3 id="直接命令添加"><a class="markdownIt-Anchor" href="#直接命令添加"></a> 直接命令添加</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(#docker run -it -v /宿主机的绝对路径:/容器内的目录[:ro]#)    </span><br><span class="line"></span><br><span class="line">ro的作用是(#只读#)，如果没有这样的文件夹则(#会自动创建#)</span><br><span class="line">如果报错说权限不够的话</span><br><span class="line">    (#--privileged=true#)</span><br></pre></td></tr></table></figure><h3 id="dockerfile添加"><a class="markdownIt-Anchor" href="#dockerfile添加"></a> dockerfile添加</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volume test Dockerfile</span><br><span class="line">       FROM centos</span><br><span class="line">       (#VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]#)</span><br><span class="line">       CMD echo &quot;finished.-----success1&quot;</span><br><span class="line">       CMD /bin/bash</span><br></pre></td></tr></table></figure><p>通过dockerfile添加的数据卷，如何查看宿主机对应的文件夹<br>(#docker inspect imagename#)</p><h3 id="数据卷的传递"><a class="markdownIt-Anchor" href="#数据卷的传递"></a> 数据卷的传递</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(#docker run -it --name dc02 --volumes-from dc01 yuxiao/centos#)</span><br><span class="line"></span><br><span class="line">在任意容器中修改文件 则都会修改</span><br><span class="line">删除所继承的容器，文件仍然在，仍然共享</span><br></pre></td></tr></table></figure><h2 id="dockerfile相关指令"><a class="markdownIt-Anchor" href="#dockerfile相关指令"></a> dockerfile相关指令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM : 当前新景象是基于哪个镜像</span><br><span class="line">        (#MAINTANER#)： 维护者的姓名和邮件地址</span><br><span class="line">        (#RUN#)        运行命令</span><br><span class="line">        (#WORKDIR#)    登陆后的工作目录</span><br><span class="line">        (#EXPOSE#)     暴漏的端口</span><br><span class="line">        (#ENV#)        可以在RUN命令中使用</span><br><span class="line">        (#ADD#)        拷贝+解压缩,支持URL</span><br><span class="line">        (#COPY#)       src dest</span><br><span class="line">        VOLUME </span><br><span class="line">        CMD 指定容器启动时要执行的命令</span><br><span class="line">            可以有多个CMD命令  (#但只有最后一个生效#)</span><br><span class="line">                </span><br><span class="line">            CMD 也会被docker run之后的参数(#替换#)</span><br><span class="line">                docker run -it 7777:8080 ls -l</span><br><span class="line">                    会被ls -l 替换</span><br><span class="line">            CMD [&quot;catalina.sh&quot;,&quot;run&quot;]</span><br><span class="line"></span><br><span class="line">        ENTRYPOINT </span><br><span class="line">            指定一个容器启动时要运行的命令</span><br><span class="line">            ENTRYPOINT 不会被docker run之后的参数替换，会追加</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ONBUILD </span><br><span class="line">            当够构建一个被继承的dockerfile运行命令，父镜像在被子镜像继承后父镜像要做的一些操作</span><br></pre></td></tr></table></figure><h2 id="git从仓库中删除已经被跟踪的文件git"><a class="markdownIt-Anchor" href="#git从仓库中删除已经被跟踪的文件git"></a> git从仓库中删除已经被跟踪的文件[#git#]</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached 文件名</span><br><span class="line">git rm --cached -r 目录</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二周</title>
      <link href="/posts/aae4713d/"/>
      <url>/posts/aae4713d/</url>
      
        <content type="html"><![CDATA[<h2 id="string与raw-string的转换"><a class="markdownIt-Anchor" href="#string与raw-string的转换"></a> string与raw string的转换</h2><p>字符串前面+r意思是告诉解释器生成字符串的时候原样生成字符串，一旦字符串生成，则无法再通过前面加r的方式实现</p><h2 id="burp内容一样却获取不一样的结果"><a class="markdownIt-Anchor" href="#burp内容一样却获取不一样的结果"></a> burp内容一样却获取不一样的结果</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以考虑ssl的问题，参看右上角target</span><br></pre></td></tr></table></figure><h2 id="python正则表达式替换"><a class="markdownIt-Anchor" href="#python正则表达式替换"></a> python正则表达式替换</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">respose = HackRequests.httpraw(text,proxy= (<span class="string">"127.0.0.1"</span>,<span class="string">"8081"</span>),ssl=<span class="literal">True</span>).text()</span><br><span class="line"><span class="comment"># r = re.compile()</span></span><br><span class="line">print(respose)</span><br><span class="line">print(re.sub(<span class="string">"dwr.engine._remoteHandleCallback\(.*\);"</span>,<span class="string">""</span>,respose))</span><br></pre></td></tr></table></figure><h2 id="python-获取脚本参数的模板"><a class="markdownIt-Anchor" href="#python-获取脚本参数的模板"></a> python 获取脚本参数的模板</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">       opts, args = getopt.getopt(sys.argv[<span class="number">1</span>:], <span class="string">"-n:-u:h"</span>, [<span class="string">"help"</span>, <span class="string">"name="</span>,<span class="string">"url="</span>])</span><br><span class="line">       <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">           <span class="keyword">if</span> opt == <span class="string">"-n"</span>:</span><br><span class="line">               name = arg</span><br><span class="line">           <span class="keyword">elif</span> opt == <span class="string">"-u"</span>:</span><br><span class="line">               url = arg</span><br><span class="line">       <span class="keyword">if</span> name <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> url <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">           print(<span class="string">"-n -u 缺一不可"</span>)</span><br><span class="line">           sys.exit(<span class="number">0</span>)</span><br><span class="line">       parseHtml(url, name)</span><br><span class="line">   <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">       print(str(e))</span><br></pre></td></tr></table></figure><h2 id="python-从raw-request-发起请求"><a class="markdownIt-Anchor" href="#python-从raw-request-发起请求"></a> python 从raw request 发起请求</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_raw</span><span class="params">(rawContent:str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Parsed Returns data needed to make request and even call to request itself for the lazy</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lines = rawContent.splitlines()</span><br><span class="line"></span><br><span class="line">    headers = &#123;&#125; <span class="comment">#Header stored here in dictionary format so it's easy to to use in 'requests'</span></span><br><span class="line">    body = <span class="string">""</span> <span class="comment">#Body is saved as a string</span></span><br><span class="line">    method = <span class="literal">None</span></span><br><span class="line">    url = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    header_is_finished = <span class="literal">False</span></span><br><span class="line">    first_body_line = <span class="literal">True</span></span><br><span class="line">    line_number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.strip() <span class="keyword">and</span> <span class="keyword">not</span> header_is_finished:    <span class="comment">#Checks if current line is empty to know where is the end of header/start of body</span></span><br><span class="line">            header_is_finished = <span class="literal">True</span>   <span class="comment">#A way to know if header is finished</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> line_number == <span class="number">1</span>:  <span class="comment">#If it's the first line we get request url and method</span></span><br><span class="line">            rmethod = line.split(<span class="string">" "</span>)</span><br><span class="line">            method = rmethod[<span class="number">0</span>]</span><br><span class="line">            url = rmethod[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> header_is_finished:    <span class="comment">#Check if still header</span></span><br><span class="line">            key, value = line.split(<span class="string">':'</span>, <span class="number">1</span>)</span><br><span class="line">            headers.update(&#123;key.strip() : value.strip() &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> header_is_finished:    <span class="comment">#If header part of the request is finished that means it's time for BODY</span></span><br><span class="line">            <span class="keyword">if</span> first_body_line:</span><br><span class="line">                body = line</span><br><span class="line">                first_body_line = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                body = <span class="string">"&#123;&#125;\n&#123;&#125;"</span>.format(body, line)</span><br><span class="line">        line_number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'headers'</span> : headers,</span><br><span class="line">        <span class="string">'url'</span> : <span class="string">"https://study.163.com"</span>+url,</span><br><span class="line">        <span class="string">'method'</span> : method,</span><br><span class="line">        <span class="string">'body'</span> : body,</span><br><span class="line">        <span class="comment">#'_request' : lambda: request(method=method, url="https://study.163.com"+url, data=body,headers=headers)</span></span><br><span class="line">    &#125;</span><br><span class="line">aa = parse_raw(raw_text)</span><br><span class="line">response = requests.post(aa[<span class="string">"url"</span>], data=aa[<span class="string">"body"</span>], headers=aa[<span class="string">"headers"</span>], ).text</span><br></pre></td></tr></table></figure><h2 id="python-打印时间位数补0"><a class="markdownIt-Anchor" href="#python-打印时间位数补0"></a> python 打印时间位数补0</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span>  (<span class="string">"%02d:%02d:%02d"</span> % (h,m,s)) <span class="keyword">if</span> h <span class="keyword">else</span> (<span class="string">"00:%02d:%02d"</span> % (m,s))</span><br></pre></td></tr></table></figure><h2 id="python-中英文固定宽度格式化"><a class="markdownIt-Anchor" href="#python-中英文固定宽度格式化"></a> python 中英文固定宽度格式化</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_format</span><span class="params">(str,width,align,sep=<span class="string">' '</span>)</span>:</span><span class="comment">#定义函数接受三个参数：要输出的字符串(str)、总占用宽度（int）、对齐方式（str:l、r、c对应左右中）</span></span><br><span class="line">    sigle=<span class="number">0</span></span><br><span class="line">    double=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str:<span class="comment">#统计单字宽和双字宽的数目</span></span><br><span class="line">        <span class="keyword">if</span> len(i.encode(<span class="string">'gb2312'</span>))==<span class="number">1</span>:</span><br><span class="line">            sigle+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> len(i.encode(<span class="string">'gb2312'</span>))==<span class="number">2</span>:</span><br><span class="line">            double+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> align==<span class="string">'l'</span>:</span><br><span class="line">        <span class="keyword">return</span> str+(width*<span class="number">2</span>-sigle-double*<span class="number">2</span>)*sep</span><br><span class="line">    <span class="keyword">elif</span> align==<span class="string">'r'</span>:</span><br><span class="line">        <span class="keyword">return</span> (width*<span class="number">2</span>-sigle-double*<span class="number">2</span>)*sep+str</span><br><span class="line">    <span class="keyword">elif</span> align==<span class="string">'c'</span>:</span><br><span class="line">        <span class="keyword">return</span> int((width*<span class="number">2</span>-sigle-double*<span class="number">2</span>)//<span class="number">2</span>)*sep+str+int((width*<span class="number">2</span>-sigle-double*<span class="number">2</span>)-(width*<span class="number">2</span>-sigle-double*<span class="number">2</span>)//<span class="number">2</span>)*sep</span><br></pre></td></tr></table></figure><h2 id="python-打印异常栈"><a class="markdownIt-Anchor" href="#python-打印异常栈"></a> python 打印异常栈</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line">traceback.print_exc()</span><br></pre></td></tr></table></figure><h2 id="python-执行js"><a class="markdownIt-Anchor" href="#python-执行js"></a> python 执行js</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  js2py</span><br><span class="line">context = js2py.EvalJs()</span><br><span class="line">context.execute(response.replace(<span class="string">"\n"</span>, <span class="string">""</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5学习</title>
      <link href="/posts/4509db9a/"/>
      <url>/posts/4509db9a/</url>
      
        <content type="html"><![CDATA[<h2 id="设置快捷键和伙伴关系"><a class="markdownIt-Anchor" href="#设置快捷键和伙伴关系"></a> 设置快捷键和伙伴关系</h2><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190531113852.gif" alt></p><h2 id="设置tab顺序"><a class="markdownIt-Anchor" href="#设置tab顺序"></a> 设置tab顺序</h2><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190531114250.png" alt></p><p>designer中可以直接编辑action<br>右键添加工具条<br>拖动action可以放在工具条上<br>三种窗口<br>QMainWindow<br>可以包含菜单栏、工具栏、状态栏<br>QWidget<br>不确定窗口的用途，就使用QWidget<br>QDialog<br>对话窗口的基类，没有菜单栏、工具栏、状态栏</p><p>如何创建一个主窗口<br>如何让主窗口居中</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">screen = QDesktopWidget().screenGeometry()</span><br><span class="line"> s = self.geometry()</span><br></pre></td></tr></table></figure><p>退出程序</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">app = QApplication.instance()</span><br><span class="line">    app.quit()</span><br></pre></td></tr></table></figure><p>手动添加按钮和水平布局<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190531140630.png" alt></p><p>屏幕坐标系</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">.move(<span class="number">250</span>,<span class="number">200</span>)</span><br><span class="line">.resize(<span class="number">300</span>,<span class="number">240</span>)</span><br><span class="line"><span class="comment">#窗口的坐标，工作区的大小</span></span><br><span class="line">.x() <span class="number">250</span></span><br><span class="line">.y() <span class="number">200</span></span><br><span class="line">.width() <span class="number">300</span></span><br><span class="line">.height() <span class="number">240</span></span><br><span class="line"><span class="comment">#工作区的坐标和大小</span></span><br><span class="line">geometry().x() <span class="number">250</span></span><br><span class="line">geometry().y() <span class="number">222</span></span><br><span class="line">geometry().width() <span class="number">300</span> </span><br><span class="line">geometry().height() <span class="number">240</span></span><br><span class="line"><span class="comment">#整个窗口的坐标和大小</span></span><br><span class="line">frameGeometry().x() <span class="number">250</span></span><br><span class="line">frameGeometry().y() <span class="number">200</span></span><br><span class="line">frameGeometry().width() <span class="number">300</span></span><br><span class="line">frameGeometry().height() <span class="number">262</span></span><br></pre></td></tr></table></figure><p>设置icon<br>窗口的setWindowIcon在苹果下面无效在windows下面有效<br>但是application的setWindowIcon在两边都有效</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QApplication.instance().setWindowIcon(QIcon())</span><br><span class="line">QMainWindow.setWindowIcon(QIcon())</span><br></pre></td></tr></table></figure><p>显示控件的提示信息</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">QToolTip.setFont(QFont(<span class="string">'SanSerif'</span>,<span class="number">12</span>))</span><br><span class="line">button.setToolTip(<span class="string">'今天是&lt;b&gt;星期五&lt;b&gt;'</span>) <span class="comment">#支持富文本</span></span><br></pre></td></tr></table></figure><p>QLabel</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">label = QLabel(<span class="string">"&amp;Name"</span>,self) <span class="comment">#开启热键，热键只有windows有效</span></span><br><span class="line">label.setText(<span class="string">"这是一个文本&lt;b&gt;标签&lt;/b&gt;"</span>)</span><br><span class="line">label.setAutoFillBackground(<span class="literal">True</span>)</span><br><span class="line">palette = QPalette()</span><br><span class="line">palette.setColor(QPalette.Window,Qt.blue)</span><br><span class="line">label.setPalette(palette)</span><br><span class="line">label.setAlignment(Qt.AlignCenter)</span><br><span class="line">label.setBuddy(passwordLineEdit) <span class="comment">#设置伙伴关系</span></span><br><span class="line"><span class="comment">#设置图片</span></span><br><span class="line">label.setPixmap(QPixmap(<span class="string">"./images/python.jpg"</span>))</span><br><span class="line">label.setText(<span class="string">"&lt;a href ='http://www.baidu.com'&gt;链接&lt;/a&gt;"</span>)</span><br><span class="line">label.setOpenExternalLinks(<span class="literal">True</span>) <span class="comment">#label中的超链接是否生效</span></span><br><span class="line"></span><br><span class="line">label.ajustSize() <span class="comment"># 根据内容自适应大小</span></span><br></pre></td></tr></table></figure><p>QLineEdit</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    QLineEdit 回显模式</span></span><br><span class="line"><span class="string">    4种回显模式</span></span><br><span class="line"><span class="string">    1.Normal  输入一个显示一个</span></span><br><span class="line"><span class="string">    2.NoEcho  不显示</span></span><br><span class="line"><span class="string">    3.Password  密码</span></span><br><span class="line"><span class="string">    4.PasswordEcho  先显示然后变成*</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    qline = QLineEdit()</span><br><span class="line">    qline.setEchoMode(QLineEdit.Normal)</span><br></pre></td></tr></table></figure><p>QLineEdit 校验器</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建三个文本框</span></span><br><span class="line">pIntLineEdit=QLineEdit()</span><br><span class="line">pDoubleLineEdit=QLineEdit()</span><br><span class="line">pValidatorLineEdit=QLineEdit()</span><br><span class="line"><span class="comment">#实例化整型验证器，并设置范围为1-99</span></span><br><span class="line">pIntvalidator=QIntValidator(self)</span><br><span class="line">pIntvalidator.setRange(<span class="number">1</span>,<span class="number">99</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#浮点型 范围 【-360,360】，精度 小数点后两位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化浮点验证器，设置范围-360到360</span></span><br><span class="line">pDoubleValidator=QDoubleValidator()</span><br><span class="line">pDoubleValidator.setRange(<span class="number">-360</span>,<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">pDoubleValidator.setNotation(QDoubleValidator.StandardNotation)</span><br><span class="line"><span class="comment">#设置精度小数点后两位</span></span><br><span class="line">pDoubleValidator.setDecimals(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字母和数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置文本允许出现的字符内容</span></span><br><span class="line">reg=QRegExp(<span class="string">'[a-zA-Z0-9]+$'</span>)</span><br><span class="line"><span class="comment">#自定义文本验证器</span></span><br><span class="line">pValidator=QRegExpValidator(self)</span><br><span class="line"><span class="comment">#设置属性</span></span><br><span class="line">pValidator.setRegExp(reg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置验证器</span></span><br><span class="line">pIntLineEdit.setValidator(pIntvalidator)</span><br><span class="line">pDoubleLineEdit.setValidator(pDoubleValidator)</span><br><span class="line">pValidatorLineEdit.setValidator(pValidator)</span><br></pre></td></tr></table></figure><p>LineEdit 掩码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建4个文本框</span></span><br><span class="line">pIPlineEdit=QLineEdit()</span><br><span class="line">pMAXlineEdit=QLineEdit()</span><br><span class="line">pDatelineEdit=QLineEdit()</span><br><span class="line">pLiceseLineEdit=QLineEdit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#setInputMask():设置掩码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ip地址掩码</span></span><br><span class="line">pIPlineEdit.setInputMask(<span class="string">'000.000.000.000;_'</span>)</span><br><span class="line"><span class="comment">#Mac地址掩码</span></span><br><span class="line">pMAXlineEdit.setInputMask(<span class="string">'HH:HH:HH:HH:HH:HH;_'</span>)</span><br><span class="line"><span class="comment">#日期掩码</span></span><br><span class="line">pDatelineEdit.setInputMask(<span class="string">'0000-00-00'</span>)</span><br><span class="line"><span class="comment">#许可证掩码</span></span><br><span class="line">pLiceseLineEdit.setInputMask(<span class="string">'&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#'</span>)</span><br></pre></td></tr></table></figure><p>QTextEdit</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">self.textEdit.setPlainText(<span class="string">'Hello PyQt5!\n单击按钮'</span>)</span><br><span class="line">self.textEdit.setHtml(<span class="string">"&lt;font color='red' size='6'&gt;&lt;red&gt;Hello PyQt5!\n单击按钮。&lt;/font&gt;"</span>)</span><br><span class="line">self.textEdit.toPlainText()</span><br><span class="line">self.textEdit.toHtml()</span><br></pre></td></tr></table></figure><p>QPushButton</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己指定调用槽的参数</span></span><br><span class="line">self.btn2.clicked.connect(<span class="keyword">lambda</span> :self.whichbtn(self.btn2))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whichbtn</span><span class="params">(self,btn)</span>:</span></span><br><span class="line">    <span class="comment">#输出被点击的按钮</span></span><br><span class="line">    print(<span class="string">'clicked button is '</span>+btn.text())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本前面显示图片</span></span><br><span class="line">self.btn2.setIcon(QIcon(QPixmap(<span class="string">'E:\pyqt5快速开发与实战\第四章\images\python.png'</span>)))</span><br></pre></td></tr></table></figure><p>QRadioButton</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 当按钮处于一个父widget时互斥</span></span><br><span class="line">self.btn2.toggled.connect(<span class="keyword">lambda</span>: self.btnstate(self.btn2))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">btnstate</span><span class="params">(self,btn)</span>:</span></span><br><span class="line">    <span class="comment">#输出按钮1与按钮2的状态，选中还是没选中</span></span><br><span class="line">        <span class="keyword">if</span> btn.text()==<span class="string">'Button1'</span>:</span><br><span class="line">            <span class="keyword">if</span> btn.isChecked()==<span class="literal">True</span>:</span><br><span class="line">                print(btn.text()+<span class="string">"is selected"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(btn.text()+<span class="string">"is deselected"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被选中和取消选中都会相应信号</span></span><br></pre></td></tr></table></figure><p>QCheckBox</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Qt.Checked            2组件没有被选中（默认）</span></span><br><span class="line"><span class="string">Qt.PartiallyChecked    1组件被半选中</span></span><br><span class="line"><span class="string">Qt.Unchecked        0组件被选中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">self.checkBox3.setTristate(<span class="literal">True</span>) <span class="comment">#设置为True才会显示半选中的状态</span></span><br></pre></td></tr></table></figure><p>QCombox</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>addItem()</td><td>添加一个下拉选项</td></tr><tr><td>—</td><td>—</td></tr><tr><td>addItems()</td><td>从列表中添加下拉选项</td></tr><tr><td>Clear()</td><td>删除下拉选项集合中的所有选项</td></tr><tr><td>count()</td><td>返回下拉选项集合中的数目</td></tr><tr><td>currentText()</td><td>返回选中选项的文本</td></tr><tr><td>itemText(i)</td><td>获取索引为i的item的选项文本</td></tr><tr><td>currentIndex()</td><td>返回选中项的索引</td></tr><tr><td>setItemText(int index,text)</td><td>改变序列号为index的文本</td></tr></tbody></table><p>QComboBox类中的常用信号</p><table><thead><tr><th>信号</th><th>含义</th></tr></thead><tbody><tr><td>Activated</td><td>当用户选中一个下拉选项时发射该信号</td></tr><tr><td>—</td><td>—</td></tr><tr><td>currentIndexChanged</td><td>当下拉选项的索引发生改变时发射该信号</td></tr><tr><td>highlighted</td><td>当选中一个已经选中的下拉选项时，发射该信号</td></tr></tbody></table><p>QSPinBox<br>QSlider</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">void  setTickPosition(TickPosition position)  #设置刻度的位置，位置还决定了slider 的方向</span><br><span class="line">void  setTickInterval(int ti) #设置刻度的间隔</span><br></pre></td></tr></table></figure><p>QDialog</p><p>一共有四种对话框<br>QMessageBox，QFileDialog，QColorDialog，QFontDialog，QInputDialog</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>setWindowTitle()</td><td>设置对话框标题</td></tr><tr><td>—</td><td>—</td></tr><tr><td>setWindowModality()</td><td>设置窗口模态，取值如下</td></tr><tr><td></td><td>Qt.NonModal：非模态，可以和程序的其他窗口进行交互</td></tr><tr><td></td><td>Qt.WindowModal:窗口模态，程序在未处理玩当前对话框时，将阻止和对话框的父窗口进行交互</td></tr><tr><td></td><td>Qt.ApplicationModal：应用程序模态，阻止和任何其他窗口进行交互</td></tr></tbody></table><p>QMessageBox</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">reply = QMessageBox.information(self, <span class="string">'标题'</span>,<span class="string">'消息对话框正文'</span>,QMessageBox.Yes | QMessageBox.No,QMessageBox.Yes)</span><br><span class="line">        reply1 = QMessageBox.question(self, <span class="string">"标题"</span>, <span class="string">"提问框消息正文"</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line">        reply2 = QMessageBox.warning(self, <span class="string">"标题"</span>, <span class="string">"警告框消息正文"</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line">        reply3 = QMessageBox.critical(self, <span class="string">"标题"</span>, <span class="string">"严重错误对话框消息正文"</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line">        reply4 = QMessageBox.about(self, <span class="string">"标题"</span>, <span class="string">"关于对话框消息正文"</span>)</span><br></pre></td></tr></table></figure><p>QInputDialog</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">items=(<span class="string">'C'</span>,<span class="string">'C++'</span>,<span class="string">'C#'</span>,<span class="string">'JAva'</span>,<span class="string">'Python'</span>)</span><br><span class="line">item,ok=QInputDialog.getItem(self,<span class="string">"select input dialog"</span>,<span class="string">'语言列表'</span>,items,<span class="number">0</span>,<span class="literal">False</span>)</span><br><span class="line">text,ok=QInputDialog.getText(self,<span class="string">'Text Input Dialog'</span>,<span class="string">'输入姓名：'</span>)</span><br><span class="line">num,ok=QInputDialog.getInt(self,<span class="string">'Integer input dualog'</span>,<span class="string">'输入数字'</span>)</span><br></pre></td></tr></table></figure><p>QFontDialog</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font,ok=QFontDialog.getFont()</span><br></pre></td></tr></table></figure><p>QFileDialog</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fname,_=QFileDialog.getOpenFileName(self,<span class="string">'Open file'</span>,<span class="string">'C:\\'</span>,<span class="string">'Image files (*.jpg *.gif *.png *.jpeg)'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取多个文件</span></span><br><span class="line"> <span class="comment">#实例化QFileDialog</span></span><br><span class="line">        dig=QFileDialog()</span><br><span class="line">        <span class="comment">#设置可以打开任何文件</span></span><br><span class="line">        dig.setFileMode(QFileDialog.AnyFile)</span><br><span class="line">        <span class="comment">#文件过滤</span></span><br><span class="line">        dig.setFilter(QDir.Files)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dig.exec_():</span><br><span class="line">            <span class="comment">#接受选中文件的路径，默认为列表</span></span><br><span class="line">            filenames=dig.selectedFiles()</span><br><span class="line">            <span class="comment">#列表中的第一个元素即是文件路径，以只读的方式打开文件</span></span><br><span class="line">            f=open(filenames[<span class="number">0</span>],<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> f:</span><br><span class="line">                <span class="comment">#接受读取的内容，并显示到多行文本框中</span></span><br><span class="line">                data=f.read()</span><br><span class="line">                self.contents.setText(data)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一周</title>
      <link href="/posts/9af29de5/"/>
      <url>/posts/9af29de5/</url>
      
        <content type="html"><![CDATA[<h2 id="2019530"><a class="markdownIt-Anchor" href="#2019530"></a> 2019.5.30</h2><h3 id="1mitmdump设置代理无效"><a class="markdownIt-Anchor" href="#1mitmdump设置代理无效"></a> 1.mitmdump设置代理无效？</h3><p>设置代理的方式</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(flow)</span>:</span></span><br><span class="line">    client_ip = flow.client_conn.address.host</span><br><span class="line">    <span class="keyword">if</span> client_ip == <span class="string">'192.168.0.10'</span>:</span><br><span class="line">        proxy = (<span class="string">'1.2.3.4'</span>, <span class="number">8080</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        proxy = (<span class="string">'3.4.5.6'</span>, <span class="number">8080</span>)</span><br><span class="line">    <span class="keyword">if</span> flow.live:</span><br><span class="line">        flow.live.change_upstream_proxy_server(proxy)</span><br></pre></td></tr></table></figure><p>但是会发现设置无效，是因为开启服务的时候必须加上-U参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mitmdump -U http://127.0.0.1:9999 -s server.py</span><br><span class="line"><span class="comment">#-U is deprecated, please use --mode upstream:SPEC instead</span></span><br><span class="line">所以现在</span><br><span class="line">mitmdump  http://127.0.0.1:9999 -s server.py --mode upstream:SPEC</span><br></pre></td></tr></table></figure><h3 id="2mitmdump或者burp-ssld的坑"><a class="markdownIt-Anchor" href="#2mitmdump或者burp-ssld的坑"></a> 2.mitmdump或者burp SSLd的坑</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.输入 http://mitm.it/ , burp输入http://burp</span><br><span class="line">2.对于chrome证书要安装在受信那一栏 设置-管理证书-受信任的证书颁发机构-导入</span><br><span class="line">3.重启chrome</span><br></pre></td></tr></table></figure><h3 id="3mitmdump打印raw-text"><a class="markdownIt-Anchor" href="#3mitmdump打印raw-text"></a> 3.mitmdump打印raw text</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy.net.http.http1 <span class="keyword">import</span> assemble</span><br><span class="line">assemble.assemble_request(flow.request)</span><br><span class="line">assemble.assemble_response(flow.response)</span><br></pre></td></tr></table></figure><h3 id="4mitmdump屏蔽自带打印"><a class="markdownIt-Anchor" href="#4mitmdump屏蔽自带打印"></a> 4.mitmdump屏蔽自带打印</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">加-q参数</span><br><span class="line">mitmdump -U http://127.0.0.1:9999 -s server.py</span><br></pre></td></tr></table></figure><h3 id="5python的log"><a class="markdownIt-Anchor" href="#5python的log"></a> 5.python的log</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level = logging.INFO,format = <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">logger.info(<span class="string">"--------------------------"</span>)</span><br></pre></td></tr></table></figure><h3 id="6python-print编码修改成utf8"><a class="markdownIt-Anchor" href="#6python-print编码修改成utf8"></a> 6.python print编码修改成utf8</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure><h3 id="7hackrequests的使用demo"><a class="markdownIt-Anchor" href="#7hackrequests的使用demo"></a> 7.HackRequests的使用demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> HackRequests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys,io</span><br><span class="line">logging.basicConfig(level = logging.INFO,format = <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line">hack = HackRequests.hackRequests()</span><br><span class="line">raw_request = <span class="string">"""</span></span><br><span class="line"><span class="string">GET / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: www.baidu.com</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Cache-Control: max-age=0</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.110 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.9</span></span><br><span class="line"><span class="string">Cookie: BAIDUID=711B1DCF857CA4831864A74B2444D3C2:FG=1; BIDUPSID=711B1DCF857CA4831864A74B2444D3C2; PSTM=1539174435; MCITY=-132%3A131%3A; BD_UPN=12314753; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BDUSS=kQ3dG4xQUhQWGFrcnNVd2x5UTNkbW5kNFo1eVNvVXpZcUhKUW0tUHB2dXotUkpkSVFBQUFBJCQAAAAAAAAAAAEAAAC0BOQPvfBfyqVfzL4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALNs61yzbOtca; COOKIE_SESSION=62_0_9_2_9_8_1_0_9_4_4_0_0_0_6_0_1559202712_0_1559202768%7C9%2346_6_1558499882%7C3; H_PS_645EC=a65bFq%2F5s3kHAuscXKDeCUI7Wn3%2BEkXP2jpxNdc6daaljTGOq1Mmz4xNyLARJPFs74WS; BD_HOME=1; H_PS_PSSID=1450_28938_21086_18560_29064_28519_29098_29139_28834_28584_29071_22160; sugstore=1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">hh = hack.httpraw(raw_request,proxy=(<span class="string">"127.0.0.1"</span>,<span class="string">'8081'</span>),ssl=<span class="literal">True</span>)</span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(hh.text())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> get√ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python与Pycharm</title>
      <link href="/posts/6878adf7/"/>
      <url>/posts/6878adf7/</url>
      
        <content type="html"><![CDATA[<h2 id="pycharm"><a class="markdownIt-Anchor" href="#pycharm"></a> pycharm</h2><h3 id="1如何增加pycharm的提示"><a class="markdownIt-Anchor" href="#1如何增加pycharm的提示"></a> 1.如何增加Pycharm的提示</h3><ol><li>参数名增加类型</li><li>声明函数的时候指定返回类型</li><li>用注释的方式指定成员变量的类型</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>:</span></span><br><span class="line">    name = <span class="literal">None</span> <span class="comment">#type: list</span></span><br><span class="line">    age = <span class="number">11</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(c: Counter)</span>-&gt;Counter:</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><h3 id="2自动import"><a class="markdownIt-Anchor" href="#2自动import"></a> 2.自动import</h3><p><a href="https://blog.csdn.net/gaopeng0071/article/details/79402399" target="_blank" rel="noopener">《关于pycharm自动导入包快捷设置》</a><br>注意是按两次1</p><h3 id="3获取对象的属性和方法"><a class="markdownIt-Anchor" href="#3获取对象的属性和方法"></a> 3.获取对象的属性和方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dir(Object)</span><br></pre></td></tr></table></figure><h3 id="4获取方法详情"><a class="markdownIt-Anchor" href="#4获取方法详情"></a> 4.获取方法详情</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按ctrl把鼠标放在方法上</span><br></pre></td></tr></table></figure><h3 id="5方法详情的文档书写"><a class="markdownIt-Anchor" href="#5方法详情的文档书写"></a> 5.方法详情的文档书写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(c,callback: typing.Callable[[str, int], str])</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    原路返回</span></span><br><span class="line"><span class="string">    :param c: 原路</span></span><br><span class="line"><span class="string">    :type c: Counter</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="comment"># return类型 会自动推断</span></span><br><span class="line"><span class="comment"># callback 可以自动推断类型</span></span><br><span class="line"><span class="comment"># 匿名函数只有lamda的形式  lamda:x,y:x+y</span></span><br></pre></td></tr></table></figure><p><code>Python Debugger</code> -&gt; <code>Collect runtime information for code insight</code> 打钩<br>调试程序一遍后<br>再次在方法上插入文档就会自动导入<br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190523171651.png" alt><br><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190523171703.png" alt></p><h2 id="python"><a class="markdownIt-Anchor" href="#python"></a> python</h2><h3 id="1获取字典dict中不存在的值时出错问题"><a class="markdownIt-Anchor" href="#1获取字典dict中不存在的值时出错问题"></a> 1.获取字典dict中不存在的值时出错问题</h3> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict.get(<span class="string">"key"</span>,<span class="literal">None</span>) <span class="comment">#没有就返回None</span></span><br></pre></td></tr></table></figure><h3 id="2python中的多线程"><a class="markdownIt-Anchor" href="#2python中的多线程"></a> 2.python中的多线程</h3><p>python3线程同步，Lock、Rlock、Condition、Event、timer、local</p><p><a href="https://www.cnblogs.com/tkqasn/p/5700281.html" target="_blank" rel="noopener">《threading多线程总结》</a></p><p><a href="https://www.jianshu.com/p/191be5f10a94" target="_blank" rel="noopener">《python3线程同步，Lock、Rlock、Condition方式》</a></p><p><a href="http://www.cnblogs.com/dahuag/p/9198618.html" target="_blank" rel="noopener"> 《多线程中的 Queue队列中join()与task_done()》 </a></p><h3 id="3python中的多进程"><a class="markdownIt-Anchor" href="#3python中的多进程"></a> 3.python中的多进程</h3><p>基本和多线程差不多，但是有一个管道的概念，类似tcp那种收发信息，可以让两个进程进行通信<br><a href="https://www.cnblogs.com/kaituorensheng/p/4445418.html" target="_blank" rel="noopener">《Python多进程编程》</a></p><h3 id="4python换源"><a class="markdownIt-Anchor" href="#4python换源"></a> 4.python换源</h3><h4 id="临时使用"><a class="markdownIt-Anchor" href="#临时使用"></a> 临时使用</h4><p>可以在使用pip的时候加参数<code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></p><p>例如：<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple gevent</code>，这样就会从清华这边的镜像去安装gevent库。</p><h4 id="永久修改"><a class="markdownIt-Anchor" href="#永久修改"></a> 永久修改</h4><p>Linux下，修改 <code>~/.pip/pip.conf</code> (没有就创建一个)， 修改 index-url至tuna，内容如下：</p> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>windows下，直接在user目录中创建一个pip目录，如：<code>C:\Users\xx\pip</code>，新建文件pip.ini，内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>或者直接使用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h3 id="5pyqt5"><a class="markdownIt-Anchor" href="#5pyqt5"></a> 5.pyqt5</h3><p><a href="https://blog.csdn.net/qq_41377419/article/details/82379818" target="_blank" rel="noopener">《从零开始 使用PyQt5》</a></p><p><a href="https://blog.csdn.net/weixin_38226671/article/details/87351062" target="_blank" rel="noopener">《关于QTcreator总是卡死无响应解决办法》</a></p><p>换了个pyqt-tools的版本 终于不卡死了</p><p><a href="http://code.py40.com/pyqt5/18.html" target="_blank" rel="noopener">《pyqt教程》</a></p><p>信号可以有不同数量的参数，参数可以为任何类型。在一个类中，可以存在信号名相同，但参数不同的多个信号。这时的调用方式为在信号之后加方括号（[ ]） ,方括号内为接收到的数据类型。可以采用类型符号或该类型的英文字符串。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blueb.clicked[bool].connect(self.setColor)</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_39607437/article/details/79213717" target="_blank" rel="noopener">《使用QTThread的正确方式》</a></p><p><a href="https://github.com/shenbo/runcat-pyqt5-win" target="_blank" rel="noopener">《系统托盘的一个例子》</a></p><h3 id="6pyinstaller"><a class="markdownIt-Anchor" href="#6pyinstaller"></a> 6.pyinstaller</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br><span class="line">pyinstaller -F -w myscript.py  #</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/5d1da5b437b7" target="_blank" rel="noopener">《Python打包工具Pyinstaller实战指南》</a></p><p><a href="https://blog.csdn.net/weixin_39000819/article/details/80942423" target="_blank" rel="noopener">《pyinstaller各种参数意思》</a></p><p><a href="https://www.landui.com/help/show-3768.html" target="_blank" rel="noopener">《pyinstaller简洁教程spec》</a></p><p><a href="https://www.oschina.net/question/941819_161672" target="_blank" rel="noopener">《PyInstaller将python脚本转成exe执行档，图标更换不了！！》</a></p><p><a href="https://blog.csdn.net/La_vie_est_belle/article/details/82260339" target="_blank" rel="noopener">《Pyinstaller打包问题之解决方案汇总》</a></p><h3 id="7python中的高级函数"><a class="markdownIt-Anchor" href="#7python中的高级函数"></a> 7.python中的高级函数</h3><p>zip()<br>map()<br>filter()<br>reduce()</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实验室如何连接M1005打印机</title>
      <link href="/posts/32c97101/"/>
      <url>/posts/32c97101/</url>
      
        <content type="html"><![CDATA[<h2 id="1-先下载驱动"><a class="markdownIt-Anchor" href="#1-先下载驱动"></a> 1. 先下载驱动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/15KN5bs_ZHSaAudTG4jT-RQ </span><br><span class="line">提取码：x4s9</span><br></pre></td></tr></table></figure><h2 id="2-连接打印机"><a class="markdownIt-Anchor" href="#2-连接打印机"></a> 2. 连接打印机</h2><h3 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h3><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190517111307.png" alt></p><h3 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h3><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190517111346.png" alt></p><h3 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步</h3><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190517111419.png" alt></p><h3 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步</h3><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190517111444.png" alt></p><h3 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//ZSH-PC/HP LaserJet M1005</span><br></pre></td></tr></table></figure><p>虽然很老但是将就着用吧</p><p><img src="https://adddd-1251699369.cos.ap-shanghai.myqcloud.com/20190517111537.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fastlane自动打包</title>
      <link href="/posts/19fab624/"/>
      <url>/posts/19fab624/</url>
      
        <content type="html"><![CDATA[<h1 id="fastlane-自动打包"><a class="markdownIt-Anchor" href="#fastlane-自动打包"></a> Fastlane 自动打包</h1><h2 id="fastlane的安装"><a class="markdownIt-Anchor" href="#fastlane的安装"></a> Fastlane的安装</h2><p>如果你单独安装过ruby(如果你能看得懂这句)，去掉sudo。如果使用系统自带的ruby，需要sudo权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[sudo] gem install fastlane</span><br></pre></td></tr></table></figure><p>初始化</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fastlane init</span><br></pre></td></tr></table></figure><p>执行完毕后会创建一个文件夹<code>fastlane</code><br>然后编辑这个文件夹中的</p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
